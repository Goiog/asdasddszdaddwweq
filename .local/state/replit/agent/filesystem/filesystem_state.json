{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nChinese Cards is a full-stack web application that gamifies learning Chinese vocabulary through a card collection system. Users can open packs containing Chinese words with varying rarity levels, build their collection, and explore their acquired vocabulary. The app features a modern trading card game (TCG) style interface with pack opening animations, card rarity systems (common, rare, epic, legendary), and collection management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with React 18 using TypeScript and Vite for development tooling. The UI framework is built on top of shadcn/ui components with Radix UI primitives, providing a consistent design system with Tailwind CSS for styling. The application uses Wouter for client-side routing and TanStack Query for server state management and caching.\n\n**Key Frontend Decisions:**\n- **Component Library Choice**: shadcn/ui was chosen for its flexibility and modern design patterns, allowing customization while maintaining consistency\n- **State Management**: TanStack Query handles server state with automatic caching, while local state uses React's built-in hooks and localStorage for persistence\n- **Routing**: Wouter provides a lightweight routing solution suitable for the simple two-page navigation structure\n- **Styling**: Tailwind CSS with CSS custom properties enables consistent theming and responsive design\n\n## Backend Architecture\nThe server uses Express.js with TypeScript, structured as a REST API. The architecture follows a layered pattern with route handlers, storage abstraction, and utility services. Currently implemented with an in-memory storage layer that can be easily swapped for a database implementation.\n\n**Key Backend Decisions:**\n- **Storage Abstraction**: IStorage interface allows switching between in-memory and database implementations without changing business logic\n- **Pack Opening Logic**: Server-side pack opening ensures fair randomization and prevents client-side manipulation\n- **File Processing**: Chinese word data is parsed from a structured text file format for easy content management\n\n## Data Storage Solutions\nThe application uses Drizzle ORM configured for PostgreSQL with Neon serverless database. The schema includes users, Chinese words, user card collections, and pack opening history. Local storage is used for client-side persistence when database is not available.\n\n**Database Schema:**\n- **users**: Basic user authentication and identification\n- **chinese_words**: Core vocabulary data with rarity assignments based on frequency\n- **user_cards**: Junction table tracking user's collected cards with counts\n- **pack_openings**: Audit trail of all pack opening events\n\n## External Dependencies\n\n**Database & Storage:**\n- Neon Serverless PostgreSQL for production data storage\n- Drizzle ORM for type-safe database operations and migrations\n- Local storage fallback for development and offline functionality\n\n**UI & Development:**\n- shadcn/ui component library built on Radix UI primitives\n- Tailwind CSS for utility-first styling with custom design tokens\n- Vite for fast development and optimized production builds\n- TanStack Query for server state management and API caching\n\n**Authentication & Validation:**\n- Zod for runtime type validation and schema definitions\n- bcrypt for password hashing (if authentication is implemented)\n- express-session with PostgreSQL session store for session management\n\n**Content & Assets:**\n- Chinese vocabulary data loaded from structured text files\n- Image assets served statically with fallback to generated placeholders\n- Font loading from Google Fonts for typography consistency","size_bytes":3745},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        chinese: ['NSimSun', 'Noto Serif SC', 'serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2822},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n  }\n})\n","size_bytes":202},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertChineseWordSchema, type ChineseWord } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve static images\n  app.use(\"/api/images\", (req, res, next) => {\n    // Remove leading slash from req.path to avoid double slash\n    const fileName = req.path.startsWith('/') ? req.path.slice(1) : req.path;\n    // Try both with and without leading space in filename\n    const imagePath = path.join(process.cwd(), \"server\", \"public\", \"Images\", fileName);\n    const imagePathWithSpace = path.join(process.cwd(), \"server\", \"public\", \"Images\", ` ${fileName}`);\n    \n    if (fs.existsSync(imagePath)) {\n      res.sendFile(imagePath);\n    } else if (fs.existsSync(imagePathWithSpace)) {\n      res.sendFile(imagePathWithSpace);\n    } else {\n      // Send a default placeholder or 404\n      res.status(404).json({ error: \"Image not found\" });\n    }\n  });\n\n  // Initialize words from database.csv file\n  app.post(\"/api/words/initialize\", async (req, res) => {\n    try {\n      const csvPath = path.join(process.cwd(), \"server\", \"public\", \"database.csv\");\n      \n      if (!fs.existsSync(csvPath)) {\n        return res.status(404).json({ error: \"Database file not found\" });\n      }\n\n      // Clear existing words first\n      await storage.clearAllWords();\n      \n      const words: any[] = [];\n      \n      const fileContent = fs.readFileSync(csvPath, \"utf-8\");\n      const lines = fileContent.split(\"\\n\").filter(line => line.trim());\n\n      // Process CSV data (skip header if present, or process all lines)\n      console.log(`Processing ${lines.length} lines from CSV`);\n      for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n        const line = lines[lineIndex];\n        \n        if (lineIndex === 0) console.log(`Starting CSV parsing, first line: ${line.substring(0, 100)}...`);\n        \n        // Parse CSV line - handle quoted values with nested quotes properly\n        const parts: string[] = [];\n        let current = '';\n        let inQuotes = false;\n        let i = 0;\n        \n        while (i < line.length) {\n          const char = line[i];\n          \n          if (char === '\"') {\n            if (inQuotes && i + 1 < line.length && line[i + 1] === '\"') {\n              // Escaped quote (double quote)\n              current += '\"';\n              i += 2;\n            } else {\n              // Toggle quote state\n              inQuotes = !inQuotes;\n              i++;\n            }\n          } else if (char === ',' && !inQuotes) {\n            // End of field\n            parts.push(current);\n            current = '';\n            i++;\n          } else {\n            current += char;\n            i++;\n          }\n        }\n        \n        // Add the last field\n        parts.push(current);\n\n        // Accept rows with at least 5 essential fields (id, chinese, pinyin, translation, fullDefinition)\n        if (parts.length >= 5) {\n          if (lineIndex % 1000 === 0) {\n            console.log(`Processing line ${lineIndex + 1}, parts: ${parts.length}`);\n          }\n          const id = parts[0]?.trim() || \"\";\n          const chinese = parts[1]?.trim() || \"\";\n          const pinyin = parts[2]?.trim() || \"\";\n          const translation = parts[3]?.trim() || \"\";\n          //const fullDefinition = parts[4]?.trim() || \"\";\n         // const firstChar = parts[5]?.trim() || chinese;\n         // const secondChar = parts[6]?.trim() || \"\";\n         // const thirdChar = parts[7]?.trim() || \"\";\n          const hsklevel = parts[4]?.trim() || \"\";\n          const frequency = parts[5] ? Number(parts[5].trim()) : 0;\n          const theme = parts[6]?.trim() || \"\";\n          const imagedefinition = parts[7]?.trim() || \"\";\n          const explanation = parts[8]?.trim() || \"\";\n          const examples = parts[9]?.trim() || \"\";\n          let rarity = \"common\";\n          if (frequency > 50000000) rarity = \"legendary\";\n          else if (frequency > 10000000) rarity = \"epic\";\n          else if (frequency > 1000000) rarity = \"rare\";\n\n          words.push({\n            id,\n            chinese,\n            pinyin,\n            translation,\n            hsklevel,\n            theme,\n            imagedefinition,\n            explanation,\n            examples,\n            frequency,\n            rarity,\n          });\n        }\n      }\n\n      console.log(`Parsed ${words.length} words from CSV file`);\n\n      const createdWords = await storage.createManyWords(words);\n      res.json({ \n        message: `Initialized ${createdWords.length} words`,\n        words: createdWords \n      });\n    } catch (error) {\n      console.error(\"Error initializing words:\", error);\n      console.error(\"Error stack:\", error instanceof Error ? error.stack : error);\n      res.status(500).json({ error: \"Failed to initialize words\" });\n    }\n  });\n\n  // Get all words\n  app.get(\"/api/words\", async (req, res) => {\n    try {\n      const words = await storage.getAllWords();\n      res.json(words);\n    } catch (error) {\n      console.error(\"Error fetching words:\", error);\n      res.status(500).json({ error: \"Failed to fetch words\" });\n    }\n  });\n\n  // Get word by ID\n  app.get(\"/api/words/:id\", async (req, res) => {\n    try {\n      const word = await storage.getWordById(req.params.id);\n      if (!word) {\n        return res.status(404).json({ error: \"Word not found\" });\n      }\n      res.json(word);\n    } catch (error) {\n      console.error(\"Error fetching word:\", error);\n      res.status(500).json({ error: \"Failed to fetch word\" });\n    }\n  });\n\n  // Open a pack (simulate pack opening)\n  // Open a pack (simulate pack opening)\n  app.post(\"/api/packs/open\", async (req, res) => {\n    try {\n      const { packType, userId = \"guest\" } = req.body;\n\n      if (![\"hsk1\", \"hsk2\", \"hsk3\", \"hsk4\", \"hsk5\", \"hsk6\"].includes(packType)) {\n        return res.status(400).json({ error: \"Invalid pack type\" });\n      }\n\n      const allWords = await storage.getAllWords();\n      if (allWords.length === 0) {\n        return res.status(400).json({ error: \"No words available. Please initialize words first.\" });\n      }\n\n      const packConfig = {\n        hsk1: { count: 5, hskLevel: \"1\" },\n        hsk2: { count: 5, hskLevel: \"2\" },\n        hsk3: { count: 5, hskLevel: \"3\" },\n        hsk4: { count: 5, hskLevel: \"4\" },\n        hsk5: { count: 5, hskLevel: \"5\" },\n        hsk6: { count: 5, hskLevel: \"6\" }\n      };\n      const config = packConfig[packType as keyof typeof packConfig];\n\n      // words for HSK level\n      const wordsOfLevel = allWords.filter(w => w.hsklevel === config.hskLevel);\n      if (wordsOfLevel.length === 0) {\n        return res.status(400).json({ error: `No HSK level ${config.hskLevel} words available` });\n      }\n\n      // build unlocked set BEFORE we add any new cards\n      const userCards = await storage.getUserCards(userId);\n      const unlockedIds = new Set(userCards.map((uc: any) => uc.cardId));\n\n      // helper weighted selection (unchanged)\n      const selectWeightedRandomCard = (cards: ChineseWord[]): ChineseWord => {\n        const weights = cards.map(card => card.frequency || 1);\n        const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n        let randomValue = Math.random() * totalWeight;\n        for (let i = 0; i < cards.length; i++) {\n          randomValue -= weights[i];\n          if (randomValue <= 0) return cards[i];\n        }\n        return cards[cards.length - 1];\n      };\n      const pickUnique = (pool: ChineseWord[]) => {\n        if (!pool.length) return null;\n        return selectWeightedRandomCard(pool);\n      };\n\n      const lockedCards = wordsOfLevel.filter(w => !unlockedIds.has(w.id));\n      const obtainedCards: (ChineseWord & { isNew: boolean })[] = [];\n\n      // STEP 1: pick up to 3 new cards (from locked)\n      for (let i = 0; i < 3 && lockedCards.length > 0; i++) {\n        const card = pickUnique(lockedCards);\n        if (!card) break;\n        obtainedCards.push({ ...card, isNew: true });\n        lockedCards.splice(lockedCards.findIndex(c => c.id === card.id), 1);\n      }\n\n      // STEP 2: fill remaining slots (allow duplicates; mark isNew based on unlockedIds)\n      while (obtainedCards.length < config.count) {\n        const card = pickUnique(wordsOfLevel) as ChineseWord;\n        if (!card) break;\n        const isNew = !unlockedIds.has(card.id);\n        obtainedCards.push({ ...card, isNew });\n      }\n\n      // --- CHANGE: only add to storage if card is true 'new' for that user ---\n      for (const randomCard of obtainedCards) {\n        if (randomCard.isNew) {\n          await storage.addUserCard({\n            userId,\n            cardId: randomCard.id,\n            count: 1\n          });\n        } else {\n          // already owned — do not add a duplicate record\n          // If you prefer incrementing a 'count' for duplicates instead of ignoring,\n          // change this to call a storage function that increments the existing count.\n        }\n      }\n\n      // Record pack opening\n      await storage.createPackOpening({\n        userId,\n        packType,\n        cardsObtained: obtainedCards.map(c => c.id)\n      });\n\n      res.json({\n        packType,\n        cards: obtainedCards,\n        message: `Opened ${packType} pack successfully!`\n      });\n    } catch (error) {\n      console.error(\"Error opening pack:\", error);\n      res.status(500).json({ error: \"Failed to open pack\" });\n    }\n  });\n\n  // NEW: accept either /api/collection/:userId OR /api/collection?userId=...\n  app.get(\"/api/collection\", async (req, res) => {\n    try {\n      const userId = String(req.query.userId ?? \"guest\");\n      const userCards = await storage.getUserCards(userId);\n\n      const cardsWithDetails = await Promise.all(\n        userCards.map(async (userCard) => {\n          const word = await storage.getWordById(userCard.cardId!);\n          return {\n            ...userCard,\n            word\n          };\n        })\n      );\n\n      res.json(cardsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching collection (query):\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n\n\n  // Get user's collection\n  app.get(\"/api/collection/:userId\", async (req, res) => {\n    try {\n      const userId = req.params.userId || \"guest\";\n      const userCards = await storage.getUserCards(userId);\n      \n      const cardsWithDetails = await Promise.all(\n        userCards.map(async (userCard) => {\n          const word = await storage.getWordById(userCard.cardId!);\n          return {\n            ...userCard,\n            word\n          };\n        })\n      );\n\n      res.json(cardsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ error: \"Failed to fetch collection\" });\n    }\n  });\n\n  // Save disliked card ID to CSV\n  app.post(\"/api/cards/dislike\", async (req, res) => {\n    try {\n      const { cardId } = req.body;\n      \n      if (!cardId) {\n        return res.status(400).json({ error: \"Card ID is required\" });\n      }\n\n      const csvPath = path.join(process.cwd(), \"disliked_cards.csv\");\n      const timestamp = new Date().toISOString();\n      const csvRow = `${cardId},${timestamp}\\n`;\n\n      // Create file with header if it doesn't exist\n      if (!fs.existsSync(csvPath)) {\n        fs.writeFileSync(csvPath, \"cardId,timestamp\\n\");\n      }\n\n      // Append the new row\n      fs.appendFileSync(csvPath, csvRow);\n\n      res.json({ success: true, message: \"Card disliked and saved\" });\n    } catch (error) {\n      console.error(\"Error saving disliked card:\", error);\n      res.status(500).json({ error: \"Failed to save disliked card\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11867},"server/storage.ts":{"content":"import { type User, type InsertUser, type ChineseWord, type InsertChineseWord, type UserCard, type InsertUserCard, type PackOpening, type InsertPackOpening } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chinese word methods\n  getAllWords(): Promise<ChineseWord[]>;\n  getWordById(id: string): Promise<ChineseWord | undefined>;\n  createWord(word: InsertChineseWord): Promise<ChineseWord>;\n  createManyWords(words: InsertChineseWord[]): Promise<ChineseWord[]>;\n  clearAllWords(): Promise<void>;\n  \n  // User card methods\n  getUserCards(userId: string): Promise<UserCard[]>;\n  addUserCard(userCard: InsertUserCard): Promise<UserCard>;\n  getUserCardByCardId(userId: string, cardId: string): Promise<UserCard | undefined>;\n  \n  // Pack opening methods\n  createPackOpening(packOpening: InsertPackOpening): Promise<PackOpening>;\n  getUserPackOpenings(userId: string): Promise<PackOpening[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private chineseWords: Map<string, ChineseWord>;\n  private userCards: Map<string, UserCard>;\n  private packOpenings: Map<string, PackOpening>;\n\n  constructor() {\n    this.users = new Map();\n    this.chineseWords = new Map();\n    this.userCards = new Map();\n    this.packOpenings = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllWords(): Promise<ChineseWord[]> {\n    return Array.from(this.chineseWords.values());\n  }\n\n  async getWordById(id: string): Promise<ChineseWord | undefined> {\n    return this.chineseWords.get(id);\n  }\n\n  async createWord(word: InsertChineseWord): Promise<ChineseWord> {\n    const chineseWord: ChineseWord = { \n      ...word,\n      firstChar: word.firstChar || null,\n      secondChar: word.secondChar || null,\n      thirdChar: word.thirdChar || null,\n      hsklevel: word.hsklevel || null,\n      imagedefinition: word.imagedefinition || null,\n      explanation: word.explanation || null,\n      fullDefinition: word.fullDefinition || null,\n      frequency: word.frequency || null,\n      rarity: word.rarity || \"common\"\n    };\n    this.chineseWords.set(word.id, chineseWord);\n    return chineseWord;\n  }\n\n  async createManyWords(words: InsertChineseWord[]): Promise<ChineseWord[]> {\n    const createdWords: ChineseWord[] = [];\n    for (const word of words) {\n      const created = await this.createWord(word);\n      createdWords.push(created);\n    }\n    return createdWords;\n  }\n\n  // Method to clear all words (useful for re-initialization)\n  async clearAllWords(): Promise<void> {\n    this.chineseWords.clear();\n  }\n\n  async getUserCards(userId: string): Promise<UserCard[]> {\n    return Array.from(this.userCards.values()).filter(\n      (card) => card.userId === userId,\n    );\n  }\n\n  async addUserCard(userCard: InsertUserCard): Promise<UserCard> {\n    const id = randomUUID();\n    const card: UserCard = { \n      ...userCard,\n      userId: userCard.userId || null,\n      cardId: userCard.cardId || null,\n      id, \n      obtainedAt: new Date(),\n      count: userCard.count || 1 \n    };\n    this.userCards.set(id, card);\n    return card;\n  }\n\n  async getUserCardByCardId(userId: string, cardId: string): Promise<UserCard | undefined> {\n    return Array.from(this.userCards.values()).find(\n      (card) => card.userId === userId && card.cardId === cardId,\n    );\n  }\n\n  async createPackOpening(packOpening: InsertPackOpening): Promise<PackOpening> {\n    const id = randomUUID();\n    const opening: PackOpening = { \n      ...packOpening,\n      userId: packOpening.userId || null,\n      cardsObtained: packOpening.cardsObtained || null,\n      id, \n      openedAt: new Date() \n    };\n    this.packOpenings.set(id, opening);\n    return opening;\n  }\n\n  async getUserPackOpenings(userId: string): Promise<PackOpening[]> {\n    return Array.from(this.packOpenings.values()).filter(\n      (opening) => opening.userId === userId,\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4546},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const chineseWords = pgTable(\"chinese_words\", {\n  id: varchar(\"id\").primaryKey(), // e.g., \"000001\"\n  pinyin: text(\"pinyin\").notNull(),\n  chinese: text(\"chinese\").notNull(),\n  translation: text(\"translation\").notNull(),\n  firstChar: text(\"first_char\"),\n  secondChar: text(\"second_char\"),\n  thirdChar: text(\"third_char\"),\n  fourthChar: text(\"fourth_char\"),\n  hsklevel: text(\"hsklevel\"), // HSK level 1-6\n  imagedefinition: text(\"imagedefinition\"),\n  explanation: text(\"explanation\"),\n  fullDefinition: text(\"full_definition\"),\n  examples: text(\"examples\"),\n  frequency: integer(\"frequency\"),\n  rarity: text(\"rarity\").notNull().default(\"common\"), // common, rare, epic, legendary\n});\n\nexport const userCards = pgTable(\"user_cards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  cardId: varchar(\"card_id\").references(() => chineseWords.id),\n  obtainedAt: timestamp(\"obtained_at\").defaultNow(),\n  count: integer(\"count\").default(1),\n});\n\nexport const packOpenings = pgTable(\"pack_openings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  packType: text(\"pack_type\").notNull(), // starter, advanced, premium\n  cardsObtained: jsonb(\"cards_obtained\"), // array of card IDs\n  openedAt: timestamp(\"opened_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertChineseWordSchema = createInsertSchema(chineseWords);\nexport const insertUserCardSchema = createInsertSchema(userCards).omit({ id: true, obtainedAt: true });\nexport const insertPackOpeningSchema = createInsertSchema(packOpenings).omit({ id: true, openedAt: true });\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ChineseWord = typeof chineseWords.$inferSelect;\nexport type UserCard = typeof userCards.$inferSelect;\nexport type PackOpening = typeof packOpenings.$inferSelect;\nexport type InsertChineseWord = z.infer<typeof insertChineseWordSchema>;\nexport type InsertUserCard = z.infer<typeof insertUserCardSchema>;\nexport type InsertPackOpening = z.infer<typeof insertPackOpeningSchema>;\n\nexport const CardRarity = z.enum([\"common\", \"rare\", \"epic\", \"legendary\"]);\nexport const PackType = z.enum([\"hsk1\", \"hsk2\", \"hsk3\", \"hsk4\", \"hsk5\", \"hsk6\"]);\n","size_bytes":2830},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Collection from \"@/pages/collection\";\nimport Training from \"@/pages/training\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/collection\" component={Collection} />\n      <Route path=\"/training\" component={Training} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":897},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(24, 35%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 20%, 95%);\n  --secondary-foreground: hsl(224, 71%, 4%);\n  --muted: hsl(210, 20%, 95%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(262, 83%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 13%, 89%);\n  --input: hsl(214, 13%, 89%);\n  --ring: hsl(262, 83%, 58%); --radius: 0.5rem; --font-sans: Inter, sans-serif; --font-serif: Georgia, serif; --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 27%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 27%, 17%);\n  --muted-foreground: hsl(217, 10%, 64%);\n  --accent: hsl(262, 83%, 58%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 27%, 17%);\n  --input: hsl(215, 27%, 17%);\n  --ring: hsl(262, 83%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n@font-face {\n  font-family: 'NSimSun';\n  src: url('/fonts/NSimSun.ttf') format('truetype');\n  font-display: swap;\n}\n\n@layer utilities {\n  .card-3d {\n    transform-style: preserve-3d;\n    transition: transform 0.3s ease;\n  }\n  \n  .card-3d:hover {\n    transform: translateY(-8px) rotateX(5deg);\n  }\n  \n  .pack-unopened {\n    background: linear-gradient(135deg, hsl(229, 84%, 67%) 0%, hsl(259, 45%, 62%) 100%);\n  }\n  \n  .card-common {\n    background: linear-gradient(135deg, hsl(210, 20%, 95%) 0%, hsl(214, 13%, 89%) 100%);\n  }\n  \n  .card-rare {\n    background: linear-gradient(135deg, hsl(217, 91%, 60%) 0%, hsl(224, 76%, 48%) 100%);\n  }\n  \n  .card-epic {\n    background: linear-gradient(135deg, hsl(258, 85%, 66%) 0%, hsl(262, 83%, 58%) 100%);\n  }\n  \n  .card-legendary {\n    background: linear-gradient(135deg, hsl(43, 96%, 56%) 0%, hsl(37, 91%, 55%) 100%);\n  }\n\n  .animate-card-flip {\n    animation: cardFlip 0.8s ease-in-out;\n  }\n  \n  .animate-card-reveal {\n    animation: cardReveal 1.2s ease-out;\n  }\n  \n/*  .holographic::after {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    background: linear-gradient(\n        120deg,\n        rgba(255, 255, 255, 0.2) 0%,\n        rgba(255, 0, 255, 0.15) 25%,\n        rgba(0, 255, 255, 0.15) 50%,\n        rgba(255, 255, 255, 0.2) 100%\n      );\n    mix-blend-mode: screen;\n    background-size: 200% 200%;\n    animation: holo-shimmer 120s linear infinite;\n    pointer-events: none;\n    z-index: 1; }*//* keep below content but above bg */\n  .holographic::after {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    background: linear-gradient(\n        120deg,\n        rgba(255, 255, 255, 0.2) 0%,\n        rgba(255, 0, 255, 0.15) 25%,\n        rgba(0, 255, 255, 0.15) 50%,\n        rgba(255, 255, 255, 0.2) 100%\n      );\n    mix-blend-mode: screen;\n    background-size: cover;   /* No shifting, fixed background */\n    background-position: center; /* Locks gradient in place */\n    pointer-events: none;\n    z-index: 1; /* keep below content but above bg */\n  }\n  \n  @keyframes holo-shimmer {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  /* Metallic shine on hover */\n  .holographic::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -75%;\n    width: 50%;\n    height: 100%;\n    background: linear-gradient(\n      75deg,\n      transparent,\n      rgba(255, 255, 255, 0.6),\n      transparent\n    );\n    transform: skewX(-20deg);\n    z-index: 2; /* above shimmer */\n    pointer-events: none;\n    opacity: 0;\n  }\n\n  .holographic:hover::before {\n    animation: holo-shine 1.5s forwards;\n  }\n\n  /* Default metallic */\n  .holographic.shine-default::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      rgba(255, 255, 255, 0.6),\n      transparent\n    );\n  }\n\n  /* Bronze */\n  .holographic.shine-1::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      #7b4a19,\n      transparent\n    );\n  }\n\n  /* Silver */\n  .holographic.shine-2::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      #c0c0c0,\n      transparent\n    );\n  }\n\n  /* Gold */\n  .holographic.shine-3::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      #ffd700,\n      transparent\n    );\n  }\n\n  /* Emerald */\n  .holographic.shine-4::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      #50c878,\n      transparent\n    );\n  }\n\n  /* Diamond (icy blue-white) */\n  .holographic.shine-5::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      #b9f2ff,\n      transparent\n    );\n  }\n\n  /* Rainbow (animated!) */\n  .holographic.shine-6::before {\n    background: linear-gradient(\n      75deg,\n      transparent,\n      red,\n      orange,\n      yellow,\n      green,\n      blue,\n      indigo,\n      violet,\n      transparent\n    );\n    background-size: 400% 100%;\n    animation: rainbow-shine 2s linear infinite;\n  }\n\n  @keyframes rainbow-shine {\n    0% {\n      background-position: 0% 50%;\n    }\n    100% {\n      background-position: 100% 50%;\n    }\n  }\n\n  @keyframes holo-shine {\n    0% {\n      left: -75%;\n      opacity: 0;\n    }\n    50% {\n      opacity: 0.5; /* peak opacity mid-way */\n    }\n    100% {\n      left: 125%;\n      opacity: 0;\n    }\n  }\n\n\n\n\n  .animate-pack-shake {\n    animation: packShake 0.5s ease-in-out;\n  }\n  \n  .animate-glow-pulse {\n    animation: glowPulse 2s ease-in-out infinite;\n  }\n}\n\n@keyframes cardFlip {\n  0% { transform: rotateY(0deg) scale(1); }\n  50% { transform: rotateY(90deg) scale(1.05); }\n  100% { transform: rotateY(0deg) scale(1); }\n}\n\n@keyframes cardReveal {\n  0% { \n    transform: scale(0.8) rotateY(180deg);\n    opacity: 0;\n  }\n  60% {\n    transform: scale(1.1) rotateY(0deg);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1) rotateY(0deg);\n    opacity: 1;\n  }\n}\n\n@keyframes packShake {\n  0%, 100% { transform: translateX(0); }\n  25% { transform: translateX(-5px) rotate(-1deg); }\n  75% { transform: translateX(5px) rotate(1deg); }\n}\n\n@keyframes glowPulse {\n  0%, 100% { box-shadow: 0 0 20px hsl(262, 83%, 58%, 0.4); }\n  50% { box-shadow: 0 0 40px hsl(262, 83%, 58%, 0.8), 0 0 60px hsl(262, 83%, 58%, 0.4); }\n}\n\n.particle {\n  pointer-events: none;\n}\n","size_bytes":7112},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/card.tsx":{"content":"import { type ChineseWord } from \"@shared/schema\";\nimport { getImageUrl } from \"@/lib/card-utils\";\nimport { useState } from \"react\";\nimport { pinyinNumericToAccents } from \"./pinyinUtils\";\n\n\ninterface CardVisualProps {\n  card: ChineseWord;\n  size?: \"sm\" | \"lg\";\n}\n\n\nexport function CardVisual({ card, size = \"sm\" }: CardVisualProps) {\n  const [imageError, setImageError] = useState(false);\n\n  const dimensions = size === \"lg\" ? \"h-[32rem]\" : \"h-72\";\n  const LayoutColorMap: Record<string, string> = {\n    \"1\": \"/api/images/Layout_HSK1.png\",\n    \"2\": \"/api/images/Layout_HSK2.png\",\n    \"3\": \"/api/images/Layout_HSK3.png\",\n    \"4\": \"/api/images/Layout_HSK4.png\",\n    \"5\": \"/api/images/Layout_HSK5.png\",\n    \"6\": \"/api/images/Layout_HSK6.png\",\n    default: \"/api/images/Layout_HSK1.png\",\n  };\n\n  const LayoutClass = LayoutColorMap[card.hsklevel?.toString() ?? \"default\"];\n\n  return (\n    <div\n      className={`aspect-[720/1024] relative ${\n        size === \"lg\" ? \"w-[20rem] border-0\" : \"w-[12rem] border-0\"\n      } overflow-hidden rounded-lg`}\n    >\n      {/* Background Image */}\n      <div className=\"absolute inset-0\">\n        {!imageError ? (\n          <img\n            src={getImageUrl(card)}\n            alt=\"\"\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full bg-gradient-to-br\" />\n        )}\n      </div>\n\n      {/* Overlay Image */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        <img\n          src={LayoutClass}\n          alt=\"Overlay\"\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      {/* Card Content Overlay */}\n      <div\n        className={`${size === \"lg\" ? \"pb-1\" : \"pb-0\"} absolute inset-0 flex flex-col h-full  text-center font-sans`}\n      >\n        {/* pinyin */}\n        <div\n          className={`${size === \"lg\" ? \"text-[0.7em]\" : \"text-[0.5em]\"} text-black drop-shadow-[0_0_4px_white]`}\n        >\n          {pinyinNumericToAccents(card.pinyin)}\n        </div>\n\n        <div className=\"flex flex-col items-center mt-0.1 font-chinese\">\n          <div className=\"relative inline-block whitespace-nowrap leading-[1]\">\n\n            {/* Text */}\n            <div\n              className={`${size === \"lg\" ? \"text-[2em]\" : \"text-[1.2em]\"} relative z-10\n                          font-extrabold bg-gradient-to-b from-black via-gray-800 to-black\n                          bg-clip-text text-transparent drop-shadow-[0_0_10px_white]`}\n            >\n              {card.chinese}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-auto text-center\">\n          <span\n            className={`${size === \"lg\" ? \"text-[0.8em]\" : \"text-[0.5em]\"} text-black drop-shadow-[0_0_4px_white]`}\n          >\n            {card.id}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface CardProps {\n  // accept both flags — server uses isNew; client code (pack-opening) sets unlocked\n  card: ChineseWord & { isNew?: boolean; unlocked?: boolean };\n  onClick?: () => void;\n  showAnimation?: boolean;\n  className?: string;\n}\n\nexport default function Card({\n  card,\n  onClick,\n  showAnimation = false,\n  className = \"\",\n}: CardProps) {\n  const cardClasses = `\n    relative card-3d bg-card border border-border rounded-xl p-4 shadow-lg hover:shadow-xl \n    transition-all duration-300 cursor-pointer card-${card.rarity} ${className}\n    ${showAnimation ? \"animate-card-reveal\" : \"\"}\n  `.trim();\n\n  // Decide which badge to show:\n  // - True NEW badge only if card was obtained in this pack AND the user did not already own it\n  const showNewBadge = card.isNew === true && card.unlocked !== true;\n  // - If it was obtained but user already owned it, show a small \"Owned\" / duplicate badge\n  const showOwnedDuplicateBadge = card.isNew === true && card.unlocked === true;\n\n  return (\n    <div\n      className={cardClasses}\n      onClick={onClick}\n      data-testid={`card-${card.id}`}\n    >\n      {/* NEW badge: only when it's truly new to the user */}\n      {showNewBadge && (\n        <span className=\"absolute top-2 right-2 z-50 bg-gradient-to-r from-green-400 to-green-600 \n        text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg animate-bounce\">\n          ✨ NEW\n        </span>\n      )}\n\n      {/* Duplicate/Owned badge when the card was obtained but already unlocked */}\n      {showOwnedDuplicateBadge && (\n        <span className=\"absolute top-2 right-2 z-50 bg-gray-800 text-white text-xs font-semibold px-2 py-1 rounded-full shadow-md\">\n          ✓ OWNED\n        </span>\n      )}\n\n      <CardVisual card={card} size=\"sm\" />\n    </div>\n  );\n}\n","size_bytes":4624},"client/src/components/exercises.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card as UICard } from \"@/components/ui/card\";\nimport { pinyinNumericToAccents } from \"@/components/pinyinUtils\";\nimport { CheckCircle, XCircle, BookOpen, Target } from \"lucide-react\";\n\ninterface ExerciseProps {\n  cards: ChineseWord[];\n  onComplete: (cards: ChineseWord[]) => void;\n}\n\nexport default function Exercises({ cards, onComplete }: ExerciseProps) {\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [exerciseType, setExerciseType] = useState<'pinyin' | 'translation'>('pinyin');\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedChoice, setSelectedChoice] = useState<string | null>(null);\n  const [showResult, setShowResult] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [exerciseScore, setExerciseScore] = useState<{pinyin: number, translation: number}>({pinyin: 0, translation: 0});\n\n  // Handle edge cases with useEffect to avoid render-time side effects\n  useEffect(() => {\n    if (!cards || cards.length === 0) {\n      onComplete([]);\n      return;\n    }\n    if (currentCardIndex >= cards.length) {\n      console.error('Invalid card index:', currentCardIndex);\n      onComplete(cards);\n      return;\n    }\n  }, [cards, currentCardIndex, onComplete]);\n\n  // Guard against empty cards array\n  if (!cards || cards.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isLastCard = currentCardIndex === cards.length - 1;\n  const isLastExerciseType = exerciseType === 'translation';\n\n  // Guard against invalid card index\n  if (!currentCard) {\n    return <div>Loading...</div>;\n  }\n\n  // Generate wrong choices for multiple choice - memoized to prevent regeneration\n  const choices = useMemo(() => {\n    if (exerciseType !== 'translation') return [];\n    \n    const correctAnswer = currentCard.translation;\n    const choices = [correctAnswer];\n    const otherCards = cards.filter(card => card.id !== currentCard.id);\n    \n    // Add two random wrong answers\n    const availableCards = [...otherCards];\n    while (choices.length < 3 && availableCards.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableCards.length);\n      const randomCard = availableCards[randomIndex];\n      if (!choices.includes(randomCard.translation)) {\n        choices.push(randomCard.translation);\n      }\n      availableCards.splice(randomIndex, 1);\n    }\n    \n    // If we still don't have enough choices and the pack is very small, \n    // add placeholder choices to reach minimum of 3\n    while (choices.length < 3) {\n      choices.push(`Option ${choices.length}`);\n    }\n    \n    // Proper seeded Fisher-Yates shuffle for deterministic but randomized order\n    const seededShuffle = (array: string[], seed: string): string[] => {\n      // Simple seeded PRNG (mulberry32)\n      let seedNum = 0;\n      for (let i = 0; i < seed.length; i++) {\n        const char = seed.charCodeAt(i);\n        seedNum = ((seedNum << 5) - seedNum) + char;\n        seedNum = seedNum & seedNum; // Convert to 32-bit integer\n      }\n      seedNum = Math.abs(seedNum);\n      \n      const seededRandom = () => {\n        seedNum = (seedNum * 1664525 + 1013904223) % 4294967296;\n        return seedNum / 4294967296;\n      };\n\n      // Fisher-Yates shuffle with seeded random\n      const result = [...array];\n      for (let i = result.length - 1; i > 0; i--) {\n        const j = Math.floor(seededRandom() * (i + 1));\n        [result[i], result[j]] = [result[j], result[i]];\n      }\n      return result;\n    };\n    \n    // Use card ID as seed for consistent but properly shuffled order\n    const shuffleSeed = `${currentCard.id}-translation`;\n    return seededShuffle(choices, shuffleSeed);\n  }, [currentCard.id, currentCard.translation, exerciseType, cards]);\n\n  // Helper function to normalize pinyin for comparison\n  const normalizePinyin = (pinyin: string): string => {\n    let normalized = pinyin.toLowerCase().trim().replace(/\\s+/g, ' ');\n    \n    // Handle common ü variations before accent conversion\n    normalized = normalized.replace(/u:/g, 'ü').replace(/v/g, 'ü');\n    \n    // If input contains tone numbers, convert to diacritical marks\n    if (/\\d/.test(normalized)) {\n      normalized = pinyinNumericToAccents(normalized);\n    }\n    \n    // Also normalize the diacritical form back to a consistent format\n    // Remove apostrophes and normalize spaces\n    return normalized.replace(/'/g, '').replace(/\\s+/g, ' ').trim();\n  };\n\n  const checkAnswer = () => {\n    let correct = false;\n    \n    if (exerciseType === 'pinyin') {\n      const normalizedAnswer = normalizePinyin(userAnswer);\n      const normalizedPinyin = normalizePinyin(currentCard.pinyin);\n      correct = normalizedAnswer === normalizedPinyin;\n    } else {\n      correct = selectedChoice === currentCard.translation;\n    }\n\n    setIsCorrect(correct);\n    setShowResult(true);\n    \n    if (correct) {\n      setExerciseScore(prev => ({\n        ...prev,\n        [exerciseType]: prev[exerciseType] + 1\n      }));\n    }\n  };\n\n  const nextExercise = () => {\n    setShowResult(false);\n    setUserAnswer('');\n    setSelectedChoice(null);\n\n    if (exerciseType === 'pinyin') {\n      // Move to translation exercise for the same card\n      setExerciseType('translation');\n    } else {\n      // Move to next card with pinyin exercise\n      if (isLastCard) {\n        onComplete(cards);\n        return;\n      }\n      setCurrentCardIndex(prev => prev + 1);\n      setExerciseType('pinyin');\n    }\n  };\n\n  const progress = ((currentCardIndex * 2 + (exerciseType === 'translation' ? 1 : 0)) / (cards.length * 2)) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-green-900/20\"></div>\n      \n      <div className=\"relative z-10 container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-yellow-500 bg-clip-text text-transparent mb-2\">\n            Card Exercises\n          </h2>\n          <p className=\"text-muted-foreground\">Master your new cards!</p>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-4\">\n            <div \n              className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Card {currentCardIndex + 1} of {cards.length} • {exerciseType === 'pinyin' ? 'Pinyin' : 'Translation'} Exercise\n          </p>\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={`${currentCardIndex}-${exerciseType}`}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"max-w-2xl mx-auto\"\n          >\n            <UICard className=\"p-8 shadow-2xl border-2 border-purple-500/30\">\n              {/* Exercise Icon */}\n              <div className=\"text-center mb-6\">\n                {exerciseType === 'pinyin' ? (\n                  <BookOpen className=\"w-12 h-12 mx-auto text-blue-500 mb-2\" />\n                ) : (\n                  <Target className=\"w-12 h-12 mx-auto text-green-500 mb-2\" />\n                )}\n              </div>\n\n              {/* Card Display */}\n              <div className=\"text-center mb-8\">\n                <div className=\"text-6xl md:text-8xl font-chinese mb-4\">\n                  {currentCard.chinese}\n                </div>\n                <div className=\"text-lg text-muted-foreground\">\n                  HSK Level {currentCard.hsklevel}\n                </div>\n              </div>\n\n              {!showResult ? (\n                <>\n                  {exerciseType === 'pinyin' ? (\n                    <PinyinExercise \n                      userAnswer={userAnswer}\n                      setUserAnswer={setUserAnswer}\n                      onSubmit={checkAnswer}\n                    />\n                  ) : (\n                    <TranslationExercise \n                      choices={choices}\n                      selectedChoice={selectedChoice}\n                      setSelectedChoice={setSelectedChoice}\n                      onSubmit={checkAnswer}\n                    />\n                  )}\n                </>\n              ) : (\n                <ExerciseResult \n                  isCorrect={isCorrect}\n                  correctAnswer={exerciseType === 'pinyin' ? currentCard.pinyin : currentCard.translation}\n                  userAnswer={exerciseType === 'pinyin' ? userAnswer : selectedChoice || ''}\n                  onNext={nextExercise}\n                  isLastExercise={isLastCard && isLastExerciseType}\n                />\n              )}\n            </UICard>\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Score Display */}\n        <div className=\"fixed bottom-4 right-4 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-4 shadow-lg\">\n          <div className=\"text-sm font-semibold mb-1\">Score</div>\n          <div className=\"flex gap-4 text-xs\">\n            <span>Pinyin: {exerciseScore.pinyin}/{cards.length}</span>\n            <span>Translation: {exerciseScore.translation}/{cards.length}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface PinyinExerciseProps {\n  userAnswer: string;\n  setUserAnswer: (answer: string) => void;\n  onSubmit: () => void;\n}\n\nfunction PinyinExercise({ userAnswer, setUserAnswer, onSubmit }: PinyinExerciseProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-2\">Type the Pinyin</h3>\n        <p className=\"text-muted-foreground\">Enter the correct pinyin pronunciation for this character</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <Input\n          type=\"text\"\n          placeholder=\"Enter pinyin (e.g., ni3 hao3)\"\n          value={userAnswer}\n          onChange={(e) => setUserAnswer(e.target.value)}\n          className=\"text-center text-lg\"\n          onKeyDown={(e) => e.key === 'Enter' && userAnswer.trim() && onSubmit()}\n          data-testid=\"input-pinyin\"\n          autoFocus\n        />\n        \n        <Button \n          onClick={onSubmit}\n          disabled={!userAnswer.trim()}\n          className=\"w-full\"\n          size=\"lg\"\n          data-testid=\"button-submit-pinyin\"\n        >\n          Submit Answer\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface TranslationExerciseProps {\n  choices: string[];\n  selectedChoice: string | null;\n  setSelectedChoice: (choice: string) => void;\n  onSubmit: () => void;\n}\n\nfunction TranslationExercise({ choices, selectedChoice, setSelectedChoice, onSubmit }: TranslationExerciseProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-2\">Choose the Translation</h3>\n        <p className=\"text-muted-foreground\">Select the correct English translation</p>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {choices.map((choice, index) => (\n          <Button\n            key={choice}\n            variant={selectedChoice === choice ? \"default\" : \"outline\"}\n            onClick={() => setSelectedChoice(choice)}\n            className=\"w-full text-left justify-start h-auto p-4\"\n            data-testid={`choice-${index}`}\n          >\n            <span className=\"font-semibold mr-3\">{String.fromCharCode(65 + index)}.</span>\n            {choice}\n          </Button>\n        ))}\n      </div>\n      \n      <Button \n        onClick={onSubmit}\n        disabled={!selectedChoice}\n        className=\"w-full\"\n        size=\"lg\"\n        data-testid=\"button-submit-translation\"\n      >\n        Submit Answer\n      </Button>\n    </div>\n  );\n}\n\ninterface ExerciseResultProps {\n  isCorrect: boolean;\n  correctAnswer: string;\n  userAnswer: string;\n  onNext: () => void;\n  isLastExercise: boolean;\n}\n\nfunction ExerciseResult({ isCorrect, correctAnswer, userAnswer, onNext, isLastExercise }: ExerciseResultProps) {\n  return (\n    <motion.div\n      initial={{ scale: 0.9, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      className=\"text-center space-y-6\"\n    >\n      <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${\n        isCorrect ? 'bg-green-100 dark:bg-green-900/30' : 'bg-red-100 dark:bg-red-900/30'\n      }`}>\n        {isCorrect ? (\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\n        ) : (\n          <XCircle className=\"w-8 h-8 text-red-600\" />\n        )}\n      </div>\n      \n      <div>\n        <h3 className={`text-xl font-semibold mb-2 ${\n          isCorrect ? 'text-green-600' : 'text-red-600'\n        }`}>\n          {isCorrect ? 'Correct!' : 'Incorrect'}\n        </h3>\n        \n        {!isCorrect && (\n          <div className=\"space-y-2\">\n            <p className=\"text-muted-foreground\">Your answer: <span className=\"font-medium\">{userAnswer}</span></p>\n            <p className=\"text-muted-foreground\">Correct answer: <span className=\"font-medium text-green-600\">{correctAnswer}</span></p>\n          </div>\n        )}\n      </div>\n      \n      <Button \n        onClick={onNext}\n        className=\"w-full\"\n        size=\"lg\"\n        data-testid={isLastExercise ? \"button-finish-exercises\" : \"button-next-exercise\"}\n      >\n        {isLastExercise ? 'Finish Exercises' : 'Next Exercise'}\n      </Button>\n    </motion.div>\n  );\n}","size_bytes":13940},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Gift, Layers, Brain } from \"lucide-react\";\n\ninterface NavigationProps {\n  cardCount: number;\n  totalCards: number;\n}\n\nexport default function Navigation({ cardCount, totalCards }: NavigationProps) {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"bg-secondary border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-primary text-2xl\">🃏</div>\n            <h1 className=\"text-xl font-bold text-foreground\">Chinese Cards</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-6\">\n            <Link \n              href=\"/\" \n              className={`px-4 py-2 rounded-lg transition-colors ${\n                location === \"/\" \n                  ? \"bg-primary text-primary-foreground\" \n                  : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n              }`}\n              data-testid=\"nav-pack-opening\"\n            >\n              <Gift className=\"inline mr-2 h-4 w-4\" />\n              Pack Opening\n            </Link>\n            <Link \n              href=\"/collection\" \n              className={`px-4 py-2 rounded-lg transition-colors ${\n                location === \"/collection\" \n                  ? \"bg-primary text-primary-foreground\" \n                  : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n              }`}\n              data-testid=\"nav-collection\"\n            >\n              <Layers className=\"inline mr-2 h-4 w-4\" />\n              Collection\n            </Link>\n            <Link \n              href=\"/training\" \n              className={`px-4 py-2 rounded-lg transition-colors ${\n                location === \"/training\" \n                  ? \"bg-primary text-primary-foreground\" \n                  : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n              }`}\n              data-testid=\"nav-training\"\n            >\n              <Brain className=\"inline mr-2 h-4 w-4\" />\n              Training area\n            </Link>\n            \n            <div className=\"flex items-center space-x-2 bg-muted px-3 py-2 rounded-lg\">\n              <span className=\"text-yellow-500\">🪙</span>\n              <span className=\"font-semibold\" data-testid=\"card-count\">{cardCount}</span>\n              <span className=\"text-muted-foreground\">/ {totalCards}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2587},"client/src/components/new-card-modal.tsx":{"content":"import { useState } from \"react\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport { ChevronLeft, ChevronRight, ThumbsDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport pinyin from \"pinyin\";\nimport Card, { CardVisual } from \"./card\";\n\n// Import the existing functions we need\nfunction speakChinese(text: string) {\n  if (\"speechSynthesis\" in window) {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = \"zh-CN\";\n    window.speechSynthesis.speak(utterance);\n  }\n}\n\nfunction normalizeChinese(text: string) {\n  return text\n    .replace(/\\s+/g, \"\") // remove spaces\n    .replace(/[，。！？,.!?]/g, \"\") // remove punctuation\n    .replace(/第一/g, \"第1\")\n    .replace(/第二/g, \"第2\")\n    .replace(/第三/g, \"第3\")\n    .replace(/第四/g, \"第4\")\n    .replace(/第五/g, \"第5\")\n    .replace(/第六/g, \"第6\")\n    .replace(/第七/g, \"第7\")\n    .replace(/第八/g, \"第8\")\n    .replace(/第九/g, \"第9\")\n    .replace(/第十/g, \"第10\");\n}\n\nfunction listenChinese(\n  expected: string,\n  onResult: (result: string, isCorrect: boolean) => void,\n) {\n  const SpeechRecognition =\n    (window as any).SpeechRecognition ||\n    (window as any).webkitSpeechRecognition;\n  if (!SpeechRecognition) {\n    alert(\"Sorry, your browser does not support speech recognition.\");\n    return;\n  }\n\n  const recognition = new SpeechRecognition();\n  recognition.lang = \"zh-CN\";\n  recognition.interimResults = false;\n  recognition.maxAlternatives = 1;\n\n  recognition.onresult = function (event: any) {\n    const userSaid = event.results[0][0].transcript;\n    const normalizedExpected = normalizeChinese(expected);\n    const normalizedUserSaid = normalizeChinese(userSaid);\n    const isCorrect = normalizedExpected === normalizedUserSaid;\n    onResult(userSaid, isCorrect);\n  };\n\n  recognition.onerror = function (event: any) {\n    console.error(\"Speech recognition error\", event.error);\n    onResult(\"Error occurred during speech recognition\", false);\n  };\n\n  recognition.start();\n}\n\nfunction renderPinyinWithCharacters(text: string) {\n  const result = pinyin(text, {\n    style: pinyin.STYLE_TONE,\n    heteronym: false,\n  });\n\n  const characters = text.split(\"\");\n  \n  return (\n    <span>\n      {characters.map((char, i) => (\n        <ruby key={i} className=\"mx-0.5\">\n          <span>{char}</span>\n          <rt className=\"text-xs text-muted-foreground\">{result[i]?.[0]}</rt>\n        </ruby>\n      ))}\n    </span>\n  );\n}\n\nfunction renderDiffWithPinyin(expected: string, actual: string) {\n  const expectedChars = expected.split(\"\");\n  const actualChars = actual.split(\"\");\n\n  const result = pinyin(actual, {\n    style: pinyin.STYLE_TONE,\n    heteronym: false,\n  });\n\n  return (\n    <span>\n      {actualChars.map((char, i) => {\n        const isDifferent = char !== expectedChars[i];\n        return (\n          <ruby key={i} className=\"mx-0.5\">\n            <span className={isDifferent ? \"text-red-600 font-bold\" : \"\"}>\n              {char}\n            </span>\n            <rt className=\"text-xs text-muted-foreground\">{result[i]?.[0]}</rt>\n          </ruby>\n        );\n      })}\n    </span>\n  );\n}\n\ninterface CardModalProps {\n  card: ChineseWord | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onCardChange?: (card: ChineseWord) => void;\n  allCards?: ChineseWord[];\n}\n\nexport function NewCardModal({\n  card,\n  isOpen,\n  onClose,\n  onCardChange,\n  allCards = [],\n}: CardModalProps) {\n  const { toast } = useToast();\n  \n  // State for examples interaction\n  const [exampleStates, setExampleStates] = useState<Record<number, {\n    userSaid: string | null;\n    isCorrect: boolean | null;\n    translation: string | null;\n  }>>({});\n  \n  // State for related cards pagination\n  const [relatedCardsStates, setRelatedCardsStates] = useState<Record<string, number>>({});\n\n  if (!isOpen || !card) return null;\n\n  // Navigation functions - clone array before sorting to avoid mutating parent state\n  const sortedCards = [...allCards].sort((a, b) => Number(a.id) - Number(b.id));\n  const currentIndex = sortedCards.findIndex(c => c.id === card.id);\n  \n  // Guard against missing cards\n  if (currentIndex === -1) {\n    console.warn('Current card not found in allCards array:', card.id);\n  }\n  const canGoPrevious = currentIndex > 0;\n  const canGoNext = currentIndex < sortedCards.length - 1;\n\n  const handlePrevious = () => {\n    if (canGoPrevious && onCardChange) {\n      onCardChange(sortedCards[currentIndex - 1]);\n    }\n  };\n\n  const handleNext = () => {\n    if (canGoNext && onCardChange) {\n      onCardChange(sortedCards[currentIndex + 1]);\n    }\n  };\n\n  // Dislike function\n  const handleDislike = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/cards/dislike\", { cardId: card.id });\n      \n      toast({\n        title: \"Card disliked\",\n        description: \"This card has been added to your disliked list.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save dislike. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Update example state\n  const updateExampleState = (index: number, updates: Partial<typeof exampleStates[0]>) => {\n    setExampleStates(prev => ({\n      ...prev,\n      [index]: { ...prev[index], ...updates }\n    }));\n  };\n\n  // Update related cards state\n  const updateRelatedCardsState = (char: string, startIndex: number) => {\n    setRelatedCardsStates(prev => ({ ...prev, [char]: startIndex }));\n  };\n\n  // Dummy translation function\n  const translateChineseToEnglish = async (text: string) => {\n    try {\n      const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=zh-CN&tl=en&dt=t&q=${encodeURIComponent(text)}`;\n      const response = await fetch(url);\n      const result = await response.json();\n      return result[0][0][0];\n    } catch (error) {\n      return \"Translation failed\";\n    }\n  };\n\n  // Split into unique characters\n  const characters = Array.from(new Set(card.chinese.split(\"\")));\n  const examples = card.examples ? card.examples.split(/\\d+\\.\\s*/).filter(Boolean) : [];\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n      data-testid=\"card-modal\"\n    >\n      <div\n        className=\"bg-card border border-border rounded-2xl p-8 max-w-7xl w-full shadow-2xl transform transition-all flex flex-col gap-6 \n                         max-h-[80vh] max-w-[145vh] overflow-y-auto relative\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Navigation Arrows */}\n        {allCards.length > 1 && (\n          <>\n            <button\n              onClick={handlePrevious}\n              disabled={!canGoPrevious}\n              className={`absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 rounded-full flex items-center justify-center transition-all\n                ${canGoPrevious \n                  ? 'bg-primary hover:bg-primary/90 text-primary-foreground cursor-pointer' \n                  : 'bg-muted text-muted-foreground cursor-not-allowed'}`}\n              data-testid=\"prev-card-arrow\"\n            >\n              <ChevronLeft className=\"w-6 h-6\" />\n            </button>\n            \n            <button\n              onClick={handleNext}\n              disabled={!canGoNext}\n              className={`absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 rounded-full flex items-center justify-center transition-all\n                ${canGoNext \n                  ? 'bg-primary hover:bg-primary/90 text-primary-foreground cursor-pointer' \n                  : 'bg-muted text-muted-foreground cursor-not-allowed'}`}\n              data-testid=\"next-card-arrow\"\n            >\n              <ChevronRight className=\"w-6 h-6\" />\n            </button>\n          </>\n        )}\n\n        {/* Card navigation indicator */}\n        {/*{allCards.length > 1 && (\n          <div className=\"text-center text-sm text-muted-foreground mb-2\">\n            Card {currentIndex + 1} of {allCards.length}\n          </div>\n        )}*/}\n\n        {/* Top Section */}\n        <div className=\"flex gap-8 items-start\">\n          {/* Left side */}\n          <div className=\"flex-1 space-y-4\">\n            <div className=\"flex items-baseline gap-3 mb-4\">\n              {card.chinese && (\n                <h3 className=\"text-4xl font-bold text-foreground\">\n                  {card.chinese}\n                </h3>\n              )}\n              {card.translation && (\n                <span className=\"text-xl text-muted-foreground\">\n                  {card.translation}\n                </span>\n              )}\n              <button\n                className=\"w-10 h-10 flex items-center justify-center bg-secondary hover:bg-secondary/80 \n                           text-secondary-foreground rounded-lg transition-colors ml-2\"\n                onClick={() => speakChinese(card.chinese)}\n                data-testid=\"speak-button\"\n              >\n                🔊\n              </button>\n            </div>\n\n            {card.explanation && (\n              <div>\n                <p\n                  className=\"text-foreground text-sm leading-relaxed whitespace-pre-line\"\n                  dangerouslySetInnerHTML={{\n                    __html: (card.explanation ?? \"\")\n                      .replace(/^### (.*)$/gm, \"<strong>$1</strong>\")\n                      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n                      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\"),\n                  }}\n                />\n              </div>\n            )}\n\n            {/* Examples */}\n            {examples.length > 0 && (\n              <div className=\"space-y-3\">\n                {examples.map((example, index) => {\n                  const exampleState = exampleStates[index] || { userSaid: null, isCorrect: null, translation: null };\n                  \n                  return (\n                    <div\n                      key={index}\n                      className=\"flex flex-col bg-muted/30 rounded-lg p-3\"\n                    >\n                      {/* Chinese with pinyin */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-lg leading-relaxed\">\n                          {renderPinyinWithCharacters(example.trim())}\n                        </div>\n                        <div className=\"flex gap-2 items-center\">\n                          <button\n                            onClick={() => speakChinese(example.trim())}\n                            className=\"px-3 py-1 rounded bg-secondary hover:bg-secondary/80 text-secondary-foreground text-sm\"\n                            data-testid={`speak-example-${index}`}\n                          >\n                            🔊\n                          </button>\n                          <button\n                            onClick={() =>\n                              listenChinese(example.trim(), (result, correct) => {\n                                updateExampleState(index, { userSaid: result, isCorrect: correct });\n                              })\n                            }\n                            className=\"px-3 py-1 rounded bg-primary hover:bg-primary/80 text-primary-foreground text-sm\"\n                            data-testid={`listen-example-${index}`}\n                          >\n                            🎤\n                          </button>\n                          <button\n                            onClick={async () => {\n                              const result = await translateChineseToEnglish(example.trim());\n                              updateExampleState(index, { translation: result });\n                            }}\n                            className=\"px-3 py-1 rounded bg-accent hover:bg-accent/80 text-accent-foreground text-sm\"\n                            data-testid={`translate-example-${index}`}\n                          >\n                            🌐\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Feedback */}\n                      {exampleState.userSaid && (\n                        <div className=\"mt-2 text-lg text-foreground flex items-center gap-2\">\n                          <span>\n                            {renderDiffWithPinyin(example.trim(), exampleState.userSaid)}\n                          </span>\n                          {exampleState.isCorrect ? (\n                            <span className=\"text-green-600\">✅</span>\n                          ) : (\n                            <span className=\"text-red-600\">❌</span>\n                          )}\n                        </div>\n                      )}\n\n                      {/* Translation */}\n                      {exampleState.translation && (\n                        <div className=\"mt-2 text-muted-foreground text-sm italic\">\n                          {exampleState.translation}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n\n            {/* Dislike Button */}\n            <div className=\"flex justify-end mt-4\">\n              <button\n                onClick={handleDislike}\n                className=\"flex items-center gap-2 px-4 py-2 bg-destructive hover:bg-destructive/90 text-destructive-foreground rounded-lg transition-colors\"\n                data-testid=\"dislike-button\"\n              >\n                <ThumbsDown className=\"w-4 h-4\" />\n                Dislike\n              </button>\n            </div>\n          </div>\n\n          {/* Right side — Card visual */}\n          <div className=\"flex-shrink-0\">\n            <CardVisual card={card} size=\"lg\" />\n          </div>\n        </div>\n\n        {/* Bottom Section — Related cards */}\n        {allCards && allCards.length > 0 && (\n          <div className=\"mt-6 space-y-4\">\n            {characters.map((char) => {\n              const related = allCards\n                .filter((c) => c.chinese.includes(char) && c.id !== card.id)\n                .sort((a, b) => Number(a.id) - Number(b.id));\n\n              if (related.length === 0) return null;\n\n              const startIndex = relatedCardsStates[char] || 0;\n              const visibleCards = related.slice(startIndex, startIndex + 5);\n              const canGoLeft = startIndex > 0;\n              const canGoRight = startIndex + 5 < related.length;\n\n              return (\n                <div key={char}>\n                  <h4 className=\"text-lg font-semibold mb-2\">\n                    Cards containing \"{char}\"\n                    {(() => {\n                      const matchingCard = allCards.find(\n                        (c) => c.chinese === char,\n                      );\n                      return matchingCard?.translation\n                        ? `: ${matchingCard.translation}`\n                        : \"\";\n                    })()}\n                  </h4>\n\n                  <div className=\"flex items-center gap-2\">\n                    {/* Left arrow */}\n                    <button\n                      onClick={() => updateRelatedCardsState(char, Math.max(0, startIndex - 1))}\n                      disabled={!canGoLeft}\n                      className=\"p-2 rounded-full bg-secondary disabled:opacity-30 hover:bg-secondary/80\"\n                      data-testid={`related-prev-${char}`}\n                    >\n                      <ChevronLeft />\n                    </button>\n\n                    {/* Card list */}\n                    <div className=\"flex gap-3 overflow-hidden flex-1\">\n                      {visibleCards.map((relatedCard) => (\n                        <Card\n                          key={relatedCard.id}\n                          card={relatedCard}\n                          onClick={() => onCardChange && onCardChange(relatedCard)}\n                        />\n                      ))}\n                    </div>\n\n                    {/* Right arrow */}\n                    <button\n                      onClick={() => updateRelatedCardsState(char, Math.min(related.length - 5, startIndex + 1))}\n                      disabled={!canGoRight}\n                      className=\"p-2 rounded-full bg-secondary disabled:opacity-30 hover:bg-secondary/80\"\n                      data-testid={`related-next-${char}`}\n                    >\n                      <ChevronRight />\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16613},"client/src/components/pack-opening.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport { PACK_CONFIGS } from \"@/lib/card-utils\";\nimport Card from \"./card\";\nimport { NewCardModal as CardModal } from \"./new-card-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Exercises from \"./exercises\";\nimport RecognitionRecallExercise from \"./recognition-recall-exercise\"; // ✅ import at top\n\n// NOTE: this file was loaded from your upload. See original for reference. :contentReference[oaicite:0]{index=0}\n\ninterface PackOpeningProps {\n  onPackOpened: (cards: (ChineseWord & { unlocked?: boolean; isNew?: boolean })[]) => void;\n  uniqueCards?: any[]; // optional: pass the user's collection items (used to compute unlocked)\n  userId?: string; // optional: defaults to \"guest\" when fetching collection\n}\n\nexport default function PackOpening({ onPackOpened, uniqueCards: uniqueCardsProp, userId = \"guest\" }: PackOpeningProps) {\n  const [isOpening, setIsOpening] = useState(false);\n  const [openingProgress, setOpeningProgress] = useState(0);\n  // allow unlocked flag and isNew flag on cards\n  const [revealedCards, setRevealedCards] = useState<(ChineseWord & { unlocked?: boolean; isNew?: boolean })[]>([]);\n  const [showCards, setShowCards] = useState(false);\n  const [showExercises, setShowExercises] = useState(false);\n  const [selectedCard, setSelectedCard] = useState<ChineseWord | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  // local state to hold the uniqueCards (either from prop or fetched)\n  const [collectionUnique, setCollectionUnique] = useState<any[]>(uniqueCardsProp ?? []);\n\n  // Helper functions for HSK styling (moved inside component)\n  const getHSKGradient = (level: number): string => {\n    const gradients = {\n      1: \"from-green-400 to-green-600\",\n      2: \"from-blue-400 to-blue-600\", \n      3: \"from-purple-400 to-purple-600\",\n      4: \"from-orange-400 to-orange-600\",\n      5: \"from-red-400 to-red-600\",\n      6: \"from-yellow-400 to-amber-600\"\n    };\n    return gradients[level as keyof typeof gradients] || \"from-gray-400 to-gray-600\";\n  };\n\n  const getHSKIcon = (level: number): string => {\n    const icons = {\n      1: \"🌱\", // Beginner\n      2: \"🌿\", // Growing\n      3: \"🌸\", // Blooming  \n      4: \"🌺\", // Advanced blooming\n      5: \"🔥\", // Fire/intensity\n      6: \"👑\"  // Crown/mastery\n    };\n    return icons[level as keyof typeof icons] || \"⭐\";\n  };\n\n  // If parent provided uniqueCards prop, keep local in sync\n  useEffect(() => {\n    if (uniqueCardsProp) {\n      setCollectionUnique(uniqueCardsProp);\n    }\n  }, [uniqueCardsProp]);\n\n  // If no uniqueCards were passed in, try to fetch the user's collection once\n  useEffect(() => {\n    if (collectionUnique.length === 0 && !uniqueCardsProp) {\n      (async () => {\n        try {\n          const res = await fetch(`/api/collection?userId=${encodeURIComponent(userId)}`);\n          if (!res.ok) return;\n          const d = await res.json();\n          // assume d.uniqueCards or d.items - be tolerant\n          const items = d.uniqueCards ?? d.items ?? d;\n          if (Array.isArray(items)) {\n            setCollectionUnique(items);\n          }\n        } catch (err) {\n          // swallow errors silently; unlocking will default to false\n          console.warn(\"Could not fetch collection for unlocks:\", err);\n        }\n      })();\n    }\n    // only run on mount or when userId changes\n  }, [userId, uniqueCardsProp, collectionUnique.length]);\n\n  // predicate copied from collection.tsx snippet you provided:\n  const isUnlocked = (word: any) => {\n    return collectionUnique.some((item: any) => item.word?.id === word.id);\n  };\n\n  // whenever collectionUnique changes, recompute unlocked flag on revealed cards (preserve isNew)\n  useEffect(() => {\n    if (revealedCards.length > 0) {\n      setRevealedCards(prev => prev.map(c => ({ ...c, unlocked: isUnlocked(c), isNew: c.isNew })));\n    }\n  }, [collectionUnique]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const openPack = async (packType: string) => {\n    setIsOpening(true);\n    setOpeningProgress(0);\n    setRevealedCards([]);\n    setShowCards(false);\n\n    try {\n      // Simulate opening progress\n      const progressInterval = setInterval(() => {\n        setOpeningProgress((prev) => {\n          if (prev >= 100) {\n            clearInterval(progressInterval);\n            return 100;\n          }\n          return prev + 10;\n        });\n      }, 100);\n\n      // Make API call to open pack\n      const response = await fetch(\"/api/packs/open\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ packType, userId }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to open pack\");\n      }\n\n      const data = await response.json();\n\n      // Wait for progress to complete\n      setTimeout(() => {\n        // compute unlocked for each card using the same predicate as collection.tsx\n        // and set isNew to true for all cards obtained in pack opening\n        const processedCards: (ChineseWord & { unlocked?: boolean; isNew?: boolean })[] = (data.cards ?? []).map((card: ChineseWord) => {\n          return {\n            ...card,\n            unlocked: isUnlocked(card),\n            isNew: true, // All cards from pack opening are considered \"new\" for badge logic\n          };\n        });\n\n        setRevealedCards(processedCards);\n        setShowCards(true);\n\n        toast({\n          title: \"Pack Opened!\",\n          description: `You received ${processedCards.length} new cards!`,\n        });\n      }, 1200);\n\n    } catch (error) {\n      console.error(\"Error opening pack:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to open pack\",\n        variant: \"destructive\",\n      });\n      setIsOpening(false);\n    }\n  };\n\n  const resetPackOpening = () => {\n    setIsOpening(false);\n    setOpeningProgress(0);\n    setRevealedCards([]);\n    setShowCards(false);\n    setShowExercises(false);\n    setSelectedCard(null);\n    setIsModalOpen(false);\n  };\n\n  const handleStartExercises = () => {\n    setShowCards(false);\n    setShowExercises(true);\n  };\n\n  const handleExercisesComplete = (cards: ChineseWord[]) => {\n    // ensure we pass cards with unlocked flag and isNew flag\n    const out = cards.map((c: any) => ({ ...c, unlocked: isUnlocked(c), isNew: true }));\n    setShowExercises(false);\n    onPackOpened(out);\n    toast({\n      title: \"Exercises Complete!\",\n      description: \"Great job! Cards added to your collection.\",\n    });\n  };\n\n  const handleCardClick = (card: ChineseWord) => {\n    setSelectedCard(card);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCard(null);\n  };\n\n  // Show exercises if exercise mode is active\n  if (showExercises) {\n    return (\n      <RecognitionRecallExercise\n        cards={revealedCards}               // 👈 passes the (possibly unlocked) revealed cards\n        onComplete={handleExercisesComplete}\n        onBack={() => {\n          setShowExercises(false);\n          setShowCards(true);               // go back to cards view if user cancels\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1614732414444-096e5f1122d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')] bg-cover bg-center opacity-20\"></div>\n\n      {/* Floating particles */}\n      <div className=\"absolute inset-0\">\n        <div className=\"particle absolute w-2 h-2 bg-purple-400 rounded-full animate-ping\" style={{ top: \"20%\", left: \"10%\", animationDelay: \"0s\" }}></div>\n        <div className=\"particle absolute w-1 h-1 bg-blue-400 rounded-full animate-ping\" style={{ top: \"60%\", left: \"80%\", animationDelay: \"1s\" }}></div>\n        <div className=\"particle absolute w-3 h-3 bg-yellow-400 rounded-full animate-ping\" style={{ top: \"80%\", left: \"20%\", animationDelay: \"2s\" }}></div>\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 py-12\">\n        {!isOpening ? (\n          <>\n            {/* Header */}\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-yellow-500 bg-clip-text text-transparent mb-4\">\n                Open Card Packs\n              </h2>\n              <p className=\"text-xl text-muted-foreground\">Discover new Chinese words and expand your vocabulary!</p>\n            </div>\n\n            {/* Pack Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto\">\n              {Object.entries(PACK_CONFIGS).map(([packType, config]) => {\n                const hskNum = parseInt(config.hskLevel);\n                const gradient = getHSKGradient(hskNum);\n                const icon = getHSKIcon(hskNum);\n                const price = hskNum <= 2 ? \"Free\" : `${hskNum * 50} Coins`;\n\n                return (\n                  <PackCard\n                    key={packType}\n                    packType={packType}\n                    title={config.title}\n                    description={`${config.count} Cards • Level ${config.hskLevel}`}\n                    details={config.description}\n                    price={price}\n                    gradient={gradient}\n                    icon={icon}\n                    className={hskNum >= 5 ? \"animate-glow-pulse\" : \"\"}\n                    onClick={() => openPack(packType)}\n                  />\n                );\n              })}\n            </div>\n          </>\n        ) : (\n          <PackOpeningAnimation\n            progress={openingProgress}\n            cards={revealedCards}\n            showCards={showCards}\n            onContinue={resetPackOpening}\n            onCardClick={handleCardClick}\n            onStartExercises={handleStartExercises}\n          />\n        )}\n      </div>\n    </div>\n    <CardModal \n      card={selectedCard}\n      isOpen={isModalOpen}\n      onClose={handleCloseModal}\n      onCardChange={(newCard) => {\n        setSelectedCard(newCard);\n      }}\n      allCards={revealedCards}\n    />\n    </>\n  );\n}\n\ninterface PackCardProps {\n  packType: string;\n  title: string;\n  description: string;\n  details: string;\n  price: string;\n  gradient: string;\n  icon: string;\n  className?: string;\n  onClick: () => void;\n}\n\nfunction PackCard({ packType, title, description, details, price, gradient, icon, className = \"\", onClick }: PackCardProps) {\n  return (\n    <motion.div\n      className={`pack-container group cursor-pointer transform transition-all duration-300 hover:scale-105 ${className}`}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onClick={onClick}\n      data-testid={`pack-${packType}`}\n    >\n      <div className={`pack-unopened rounded-2xl p-8 text-center shadow-2xl border-2 border-purple-500/50`}>\n        <motion.div\n          className={`w-24 h-32 mx-auto mb-6 bg-gradient-to-b ${gradient} rounded-xl shadow-lg relative`}\n          whileHover={{ rotate: [0, -2, 2, 0] }}\n          transition={{ duration: 0.5 }}\n        >\n          <div className={`absolute inset-2 bg-gradient-to-b ${gradient.replace(\"400\", \"300\").replace(\"600\", \"500\")} rounded-lg`}>\n            <div className=\"flex items-center justify-center h-full\">\n              <span className=\"text-2xl\">{icon}</span>\n            </div>\n          </div>\n        </motion.div>\n        <h3 className=\"text-2xl font-bold text-white mb-2\">{title}</h3>\n        <p className=\"text-blue-200 mb-4\">{description}</p>\n        <div className=\"bg-black/20 rounded-lg p-3 mb-4\">\n          <div className=\"text-sm text-blue-200\">Contains:</div>\n          <div className=\"text-white font-semibold\">{details}</div>\n        </div>\n        <Button \n          className=\"w-full bg-yellow-500 hover:bg-yellow-400 text-black font-bold py-3 px-6 rounded-xl transition-colors\"\n          data-testid={`open-pack-${packType}`}\n        >\n          Open Pack - {price}\n        </Button>\n      </div>\n    </motion.div>\n  );\n}\n\ninterface PackOpeningAnimationProps {\n  progress: number;\n  cards: ChineseWord[];\n  showCards: boolean;\n  onContinue: () => void;\n  onCardClick: (card: ChineseWord) => void;\n  onStartExercises: () => void;\n}\n\nfunction PackOpeningAnimation({ progress, cards, showCards, onContinue, onCardClick, onStartExercises }: PackOpeningAnimationProps) {\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [hasViewedAllCards, setHasViewedAllCards] = useState(false);\n  const [viewMode, setViewMode] = useState<\"individual\" | \"all\">(\"individual\");\n\n  // Reset state when cards are revealed\n  useEffect(() => {\n    if (showCards && cards.length > 0) {\n      setCurrentCardIndex(0);\n      setHasViewedAllCards(cards.length === 1);\n      setViewMode(\"individual\");\n    }\n  }, [showCards, cards.length]);\n\n  // Update hasViewedAllCards when currentCardIndex changes\n  useEffect(() => {\n    if (showCards && cards.length > 0 && viewMode === \"individual\") {\n      setHasViewedAllCards(currentCardIndex === cards.length - 1);\n    }\n  }, [showCards, cards.length, currentCardIndex, viewMode]);\n\n  const handlePrevCard = () => {\n    setCurrentCardIndex(i => Math.max(0, i - 1));\n  };\n\n  const handleNextCard = () => {\n    setCurrentCardIndex(i => Math.min(i + 1, cards.length - 1));\n  };\n\n  const handleViewAllCards = () => {\n    setViewMode(\"all\");\n  };\n\n  return (\n    <div className=\"text-center\" data-testid=\"pack-opening-animation\">\n      <div className=\"mb-8\">\n        <h3 className=\"text-3xl font-bold text-white mb-4\">\n          {showCards ? \"Your Cards\" : \"Opening Pack...\"}\n        </h3>\n        {!showCards && (\n          <div className=\"w-16 h-2 bg-secondary rounded-full mx-auto overflow-hidden\">\n            <motion.div \n              className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n              initial={{ width: 0 }}\n              animate={{ width: `${progress}%` }}\n              transition={{ duration: 0.5 }}\n              data-testid=\"opening-progress\"\n            />\n          </div>\n        )}\n      </div>\n      \n      <AnimatePresence>\n        {showCards && cards.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"space-y-8\"\n          >\n            {viewMode === \"individual\" ? (\n              <>\n                {/* Card Progress Indicator */}\n                <div className=\"text-white/70 text-sm mb-4\">\n                  Card {currentCardIndex + 1} of {cards.length}\n                </div>\n\n                {/* Single Card Display with Navigation */}\n                <div className=\"relative flex items-center justify-center min-h-[400px]\" data-testid=\"card-navigation\">\n                  {/* Left Navigation Area */}\n                  <button\n                    onClick={handlePrevCard}\n                    disabled={currentCardIndex === 0}\n                    className={`absolute left-0 top-0 h-full w-24 flex items-center justify-center z-10 transition-colors ${\n                      currentCardIndex > 0 \n                        ? \"text-white/50 hover:text-white cursor-pointer\" \n                        : \"text-white/20 cursor-not-allowed\"\n                    }`}\n                    data-testid=\"prev-card-btn\"\n                    aria-label=\"Previous card\"\n                  >\n                    <div className=\"text-3xl\">‹</div>\n                  </button>\n\n                  {/* Current Card */}\n                  <div className=\"flex justify-center px-32\" data-testid=\"current-card-container\">\n                    <AnimatePresence mode=\"wait\">\n                      <motion.div\n                        key={currentCardIndex}\n                        initial={{ opacity: 0, scale: 0.8, rotateY: 180 }}\n                        animate={{ opacity: 1, scale: 1.4, rotateY: 0 }}\n                        exit={{ opacity: 0, scale: 0.8, rotateY: -180 }}\n                        transition={{ \n                          duration: 0.6,\n                          type: \"spring\",\n                          stiffness: 100\n                        }}\n                      >\n                        <Card \n                          card={cards[currentCardIndex]} \n                          showAnimation\n                          onClick={() => onCardClick(cards[currentCardIndex])}\n                        />\n                      </motion.div>\n                    </AnimatePresence>\n                  </div>\n\n                  {/* Right Navigation Area */}\n                  <button\n                    onClick={handleNextCard}\n                    disabled={currentCardIndex === cards.length - 1}\n                    className={`absolute right-0 top-0 h-full w-24 flex items-center justify-center z-10 transition-colors ${\n                      currentCardIndex < cards.length - 1 \n                        ? \"text-white/50 hover:text-white cursor-pointer\" \n                        : \"text-white/20 cursor-not-allowed\"\n                    }`}\n                    data-testid=\"next-card-btn\"\n                    aria-label=\"Next card\"\n                  >\n                    <div className=\"text-3xl\">›</div>\n                  </button>\n                </div>\n\n                {/* Navigation Instructions */}\n                <div className=\"text-white/60 text-sm\">\n                  {currentCardIndex < cards.length - 1 ? (\n                    \"Click the right side to see the next card\"\n                  ) : (\n                    \"You've seen all cards!\"\n                  )}\n                </div>\n                \n                {/* View All Cards Button - show after viewing all cards individually */}\n                {hasViewedAllCards && (\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <Button \n                      onClick={handleViewAllCards}\n                      className=\"mt-8 bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-xl transition-colors\"\n                      data-testid=\"view-all-cards-btn\"\n                    >\n                      View All Cards Together\n                    </Button>\n                  </motion.div>\n                )}\n              </>\n            ) : (\n              <>\n                {/* All Cards Grid View */}\n                <div className=\"text-white/70 text-sm mb-4\">\n                  All {cards.length} Cards\n                </div>\n                \n                <div className=\"flex flex-wrap justify-center gap-10\">\n                  {cards.map((card, index) => (\n                    <motion.div\n                      key={`${card.id}-${index}`}\n                      initial={{ opacity: 0, scale: 1, rotateY: 180 }}\n                      animate={{ opacity: 1, scale: 1.1, rotateY: 0 }}\n                      transition={{ \n                        delay: index * 0.1,\n                        duration: 0.6,\n                        type: \"spring\",\n                        stiffness: 100\n                      }}\n                    >\n                      <Card \n                        card={card} \n                        showAnimation \n                        onClick={() => onCardClick(card)}\n                      />\n                    </motion.div>\n                  ))}\n                </div>\n\n                {/* Continue Button - show in all cards view */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: cards.length * 0.1 }}\n                  className=\"text-center\"\n                >\n                  <p className=\"text-muted-foreground mb-4\">\n                    Complete the exercises to master these cards and add them to your collection!\n                  </p>\n                  <Button \n                    onClick={onStartExercises}\n                    className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-bold py-3 px-8 rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n                    data-testid=\"start-exercises-btn\"\n                  >\n                    🎯 Start Exercises\n                  </Button>\n                </motion.div>\n              </>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":20954},"client/src/components/pinyinUtils.tsx":{"content":"import React from \"react\";\n\n/**\n * Convert numeric-tone pinyin to diacritics.\n * - Supports 1–4 tones; 5 or 0 = neutral (no mark).\n * - Handles ü written as \"ü\", \"u:\" or \"v\".\n * - Applies correct placement rules (a/e priority, \"ou\" -> o, \"iu/ui\" -> second vowel).\n * - Preserves capitalization (e.g., Zhong1 -> Zhōng).\n */\nexport function pinyinNumericToAccents(input) {\n  if (!input) return \"\";\n\n  const toneMarks = {\n    a: [\"ā\", \"á\", \"ǎ\", \"à\"],\n    e: [\"ē\", \"é\", \"ě\", \"è\"],\n    i: [\"ī\", \"í\", \"ǐ\", \"ì\"],\n    o: [\"ō\", \"ó\", \"ǒ\", \"ò\"],\n    u: [\"ū\", \"ú\", \"ǔ\", \"ù\"],\n    \"ü\": [\"ǖ\", \"ǘ\", \"ǚ\", \"ǜ\"],\n  };\n\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"ü\"];\n\n  // Replace all syllables ending with a tone number\n  return input.replace(\n    /([A-Za-züv:]+?)([1-5]|0)(?=\\b|[^A-Za-zü:])/g,\n    (_, rawSyllable, toneStr) => {\n      const tone = parseInt(toneStr, 10);\n      // neutral tone: just drop the number and normalize ü forms\n      if (tone === 5 || tone === 0) {\n        return normalizeUmlaut(rawSyllable);\n      }\n\n      // Normalize ü variants inside the syllable\n      let syllable = normalizeUmlaut(rawSyllable);\n\n      // Decide which vowel to mark\n      const lower = syllable.toLowerCase();\n\n      // Find index to mark based on pinyin rules\n      const idx = findMarkedVowelIndex(lower);\n\n      if (idx === -1) return syllable; // nothing to mark\n\n      const charToMark = syllable[idx];\n      const lowerChar = lower[idx];\n\n      // Safety: if target isn't a vowel, return unchanged\n      if (!vowels.includes(lowerChar)) return syllable;\n\n      // Get diacritic for tone (1–4)\n      const mark = toneMarks[lowerChar][tone - 1];\n\n      // Preserve case\n      const markedChar =\n        charToMark === charToMark.toUpperCase() ? mark.toUpperCase() : mark;\n\n      return syllable.slice(0, idx) + markedChar + syllable.slice(idx + 1);\n    }\n  );\n\n  // --- helpers ---\n\n  function normalizeUmlaut(s) {\n    // accept ü, u:, U:, v, V\n    return s\n      .replace(/u:/g, \"ü\")\n      .replace(/U:/g, \"Ü\")\n      .replace(/v/g, \"ü\")\n      .replace(/V/g, \"Ü\");\n  }\n\n  function findMarkedVowelIndex(lower) {\n    // Rule 1: if 'a' present -> mark 'a'\n    let i = lower.indexOf(\"a\");\n    if (i !== -1) return i;\n\n    // Rule 2: else if 'e' present -> mark 'e'\n    i = lower.indexOf(\"e\");\n    if (i !== -1) return i;\n\n    // Rule 3: else if contains \"ou\" -> mark 'o'\n    i = lower.indexOf(\"ou\");\n    if (i !== -1) return i;\n\n    // Rule 4: in \"iu\" or \"ui\", mark the second vowel\n    const iu = lower.indexOf(\"iu\");\n    if (iu !== -1) return iu + 1;\n    const ui = lower.indexOf(\"ui\");\n    if (ui !== -1) return ui + 1;\n\n    // Fallback: first vowel left-to-right\n    for (let k = 0; k < lower.length; k++) {\n      if (\"aeiouü\".includes(lower[k])) return k;\n    }\n    return -1;\n  }\n}\n\n/* ---- Minimal demo component ---- */\nexport default function PinyinConverter() {\n  const [src, setSrc] = React.useState(\"shi2 ta1 men5 Zhong1guo2 lü4 lv4 lu:4 liu2 gui4\");\n  const out = React.useMemo(() => pinyinNumericToAccents(src), [src]);\n\n  return (\n    <div className=\"max-w-xl mx-auto p-4 space-y-3\">\n      <h1 className=\"text-2xl font-semibold\">Pinyin Tone Converter</h1>\n      <textarea\n        className=\"w-full p-3 rounded-xl border outline-none\"\n        rows={4}\n        value={src}\n        onChange={(e) => setSrc(e.target.value)}\n        placeholder=\"Type pinyin with numbers (e.g., ni3 hao3, Zhong1guo2)\"\n      />\n      <div className=\"p-3 rounded-xl bg-gray-50 border\">\n        <div className=\"text-sm text-gray-500 mb-1\">Converted:</div>\n        <div className=\"text-lg break-words\">{out}</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3664},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/card-utils.ts":{"content":"import { type ChineseWord } from \"@shared/schema\";\n\n\nexport interface PackConfig {\n  count: number;\n  hskLevel: string;\n  title: string;\n  description: string;\n}\n\nexport const PACK_CONFIGS: Record<string, PackConfig> = {\n  hsk1: {\n    count: 6,\n    hskLevel: \"1\",\n    title: \"HSK Level 1 Pack\",\n    description: \"500 most basic Chinese words\"\n  },\n  hsk2: {\n    count: 6,\n    hskLevel: \"2\", \n    title: \"HSK Level 2 Pack\",\n    description: \"500 elementary Chinese words\"\n  },\n  hsk3: {\n    count: 6,\n    hskLevel: \"3\",\n    title: \"HSK Level 3 Pack\", \n    description: \"800 intermediate Chinese words\"\n  },\n  hsk4: {\n    count: 6,\n    hskLevel: \"4\",\n    title: \"HSK Level 4 Pack\",\n    description: \"1000 upper-intermediate words\"\n  },\n  hsk5: {\n    count: 6,\n    hskLevel: \"5\",\n    title: \"HSK Level 5 Pack\",\n    description: \"1000 advanced Chinese words\"\n  },\n  hsk6: {\n    count: 6,\n    hskLevel: \"6\", \n    title: \"HSK Level 6 Pack\",\n    description: \"1200 fluent level words\"\n  }\n};\n\nexport function getImageUrl(card: { id: string}): string {\n  return `/api/images/${card.id}.webp`;\n}\n\nexport function saveCollectionToLocalStorage(cards: any[]) {\n  localStorage.setItem(\"chineseCards_collection\", JSON.stringify(cards));\n}\n\nexport function loadCollectionFromLocalStorage(): any[] {\n  const saved = localStorage.getItem(\"chineseCards_collection\");\n  return saved ? JSON.parse(saved) : [];\n}\n\nexport function addCardToLocalCollection(card: ChineseWord) {\n  const collection = loadCollectionFromLocalStorage();\n  const existing = collection.find((c: any) => c.word?.id === card.id);\n  \n  if (existing) {\n    existing.count = (existing.count || 1) + 1;\n  } else {\n    collection.push({\n      id: Math.random().toString(36),\n      userId: \"guest\",\n      cardId: card.id,\n      count: 1,\n      obtainedAt: new Date().toISOString(),\n      word: card\n    });\n  }\n  \n  saveCollectionToLocalStorage(collection);\n  return collection;\n}\n","size_bytes":1927},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/words-parser.ts":{"content":"export interface WordData {\n  id: string;\n  pinyin: string;\n  chinese: string;\n  translation: string;\n  fullDefinition?: string;\n  frequency?: number;\n  rarity: \"common\" | \"rare\" | \"epic\" | \"legendary\";\n}\n\nexport function parseWordsLine(line: string): WordData | null {\n  const parts = line.split(\"|\");\n  \n  if (parts.length < 6) return null;\n  \n  const id = parts[0].trim();\n  const chinese = parts[2].trim();\n  const pinyin = parts[3].trim();\n  const translation = parts[4].trim();\n  const fullDefinition = parts[5].trim();\n  const frequency = parseInt(parts[10]) || 0;\n  \n  if (!id || !chinese || !pinyin || !translation) return null;\n  \n  // Assign rarity based on frequency\n  let rarity: \"common\" | \"rare\" | \"epic\" | \"legendary\" = \"common\";\n  if (frequency > 50000000) rarity = \"legendary\";\n  else if (frequency > 10000000) rarity = \"epic\";\n  else if (frequency > 1000000) rarity = \"rare\";\n  \n  return {\n    id,\n    chinese,\n    pinyin,\n    translation,\n    fullDefinition,\n    frequency,\n    rarity\n  };\n}\n\nexport function parseWordsFile(content: string): WordData[] {\n  const lines = content.split(\"\\n\").filter(line => line.trim() && !line.startsWith(\"000000\"));\n  const words: WordData[] = [];\n  \n  for (const line of lines) {\n    const word = parseWordsLine(line);\n    if (word) {\n      words.push(word);\n    }\n  }\n  \n  return words;\n}\n","size_bytes":1345},"client/src/pages/collection.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport Navigation from \"@/components/navigation\";\nimport Card from \"@/components/card\";\nimport { NewCardModal as CardModal } from \"@/components/new-card-modal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Grid, List, Search } from \"lucide-react\";\nimport { loadCollectionFromLocalStorage } from \"@/lib/card-utils\";\n\nexport default function Collection() {\n  const [collection] = useState(loadCollectionFromLocalStorage());\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [hskFilter, setHskFilter] = useState(\"all\");\n  const [themeFilter, setThemeFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"id\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedCard, setSelectedCard] = useState<ChineseWord | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Query to get all available words for stats\n  const { data: allWords = [] } = useQuery<ChineseWord[]>({\n    queryKey: [\"/api/words\"],\n  });\n\n  // Process collection data\n  const uniqueCards = collection.reduce((acc: any[], item: any) => {\n    const existing = acc.find(c => c.word?.id === item.word?.id);\n    if (!existing) acc.push(item);\n    return acc;\n  }, []);\n  const combinedCards = useMemo(() => {\n    return allWords.map((word) => {\n      const unlocked = uniqueCards.some((item: any) => item.word?.id === word.id);\n      //const unlocked = true;\n      return { word, unlocked };\n    });\n  }, [allWords, uniqueCards]);\n  // Calculate stats\n  const stats = useMemo(() => {\n    // Count owned cards by HSK level\n    const ownedByHSK: Record<string, number> = {};\n    uniqueCards.forEach((item: any) => {\n      const level = item.word?.hsklevel || \"Unknown\";\n      ownedByHSK[level] = (ownedByHSK[level] || 0) + 1;\n    });\n\n    // Count total available cards by HSK level\n    const totalByHSK: Record<string, number> = {};\n    allWords.forEach((word: any) => {\n      const level = word.hsklevel || \"Unknown\";\n      totalByHSK[level] = (totalByHSK[level] || 0) + 1;\n    });\n\n    return { ownedByHSK, totalByHSK };\n  }, [uniqueCards, allWords]);\n\n  const filteredCards = useMemo(() => {\n    let filtered = combinedCards.filter(({ word }) => {\n      if (!word) return false;\n\n      // Search filter\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n        if (\n          !word.pinyin.toLowerCase().includes(query) &&\n          !word.chinese.toLowerCase().includes(query) &&\n          !word.translation.toLowerCase().includes(query)\n        ) {\n          return false;\n        }\n      }\n\n      // HSK filter\n      if (hskFilter && hskFilter !== \"all\" && String(word.hsklevel) !== hskFilter) {\n        return false;\n      }\n\n      // ✅ Theme filter\n      if (themeFilter && themeFilter !== \"all\" && word.theme !== themeFilter) {\n        return false;\n      }\n\n      return true;\n    });\n\n    // Sorting logic (unchanged) …\n    filtered.sort((a, b) => { /* ... */ });\n\n    return filtered;\n  }, [combinedCards, searchQuery, hskFilter, themeFilter, sortBy]);\n\n  // All unique theme values from the loaded words\n  const allThemes = useMemo(() => {\n    const themes = new Set<string>();\n    allWords.forEach((word) => {\n      if (word.theme) themes.add(word.theme);\n    });\n    return Array.from(themes).sort(); // optional sort\n  }, [allWords]);\n\n  const handleCardClick = (card: ChineseWord) => {\n    setSelectedCard(card);\n    setIsModalOpen(true);\n  };\n\n  const progressPercentage = allWords.length > 0 ? (uniqueCards.length / allWords.length) * 100 : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation \n        cardCount={uniqueCards.length} \n        totalCards={allWords.length} \n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Collection Header */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 space-y-4 lg:space-y-0\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">My Collection</h2>\n            <p className=\"text-muted-foreground\">Browse and manage your Chinese vocabulary cards</p>\n          </div>\n          \n          {/* Collection Stats by HSK Level */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {Object.keys(stats.totalByHSK).map((level) => (\n              <div\n                key={level}\n                className=\"bg-card border border-border rounded-lg p-4 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-primary\">\n                  {stats.ownedByHSK[level] || 0} / {stats.totalByHSK[level]}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">HSK {level}</div>\n              </div>\n            ))}\n          </div>\n\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-card border border-border rounded-xl p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search cards...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-input\"\n              />\n            </div>\n            \n            {/* HSK Level Filter */}\n            <Select value={hskFilter} onValueChange={setHskFilter}>\n              <SelectTrigger data-testid=\"hsk-filter\">\n                <SelectValue placeholder=\"All HSK Levels\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All HSK Levels</SelectItem>\n                <SelectItem value=\"1\">HSK 1</SelectItem>\n                <SelectItem value=\"2\">HSK 2</SelectItem>\n                <SelectItem value=\"3\">HSK 3</SelectItem>\n                <SelectItem value=\"4\">HSK 4</SelectItem>\n                <SelectItem value=\"5\">HSK 5</SelectItem>\n                <SelectItem value=\"6\">HSK 6</SelectItem>\n              </SelectContent>\n            </Select>\n            {/* Theme Filter */}\n            <Select value={themeFilter} onValueChange={setThemeFilter}>\n              <SelectTrigger data-testid=\"theme-filter\">\n                <SelectValue placeholder=\"All Themes\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Themes</SelectItem>\n                {allThemes.map(theme => (\n                  <SelectItem key={theme} value={theme}>\n                    {theme}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {/* Sort Options */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger data-testid=\"sort-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"id\">Sort by ID</SelectItem>\n                <SelectItem value=\"pinyin\">Sort by Pinyin</SelectItem>\n                <SelectItem value=\"chinese\">Sort by Chinese</SelectItem>\n                <SelectItem value=\"recent\">Recently Added</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* View Toggle */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"grid\")}\n                className=\"flex-1\"\n                data-testid=\"grid-view-btn\"\n              >\n                <Grid className=\"mr-2 h-4 w-4\" />\n                Grid\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"list\")}\n                className=\"flex-1\"\n                data-testid=\"list-view-btn\"\n              >\n                <List className=\"mr-2 h-4 w-4\" />\n                List\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-sm font-medium text-foreground\">Collection Progress</span>\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"progress-percentage\">\n              {progressPercentage.toFixed(1)}%\n            </span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-3\">\n            <div \n              className=\"bg-gradient-to-r from-primary to-accent h-3 rounded-full transition-all duration-500\" \n              style={{ width: `${progressPercentage}%` }}\n              data-testid=\"progress-bar\"\n            />\n          </div>\n        </div>\n\n        {/* Empty State */}\n        {uniqueCards.length === 0 && (\n          <div className=\"text-center py-16\">\n            <div className=\"text-6xl mb-4\">🃏</div>\n            <h3 className=\"text-2xl font-bold mb-2\">No Cards Yet</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Open some card packs to start building your collection!\n            </p>\n            <Button onClick={() => window.location.href = \"/\"} data-testid=\"open-packs-btn\">\n              Open Card Packs\n            </Button>\n          </div>\n        )}\n\n        {/* Card Grid/List */}\n        {/* {uniqueCards.length > 0 && (\n          <div \n            className={\n              viewMode === \"grid\" \n                ? \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-6\" \n                : \"space-y-4\"\n            }\n            data-testid=\"card-collection\"\n          >\n            {filteredCards.map(({ word, unlocked }: any) => (\n              <div key={word.id} className=\"relative\">\n                <Card\n                  card={word}\n                  onClick={() => unlocked && handleCardClick(word)} // only clickable if unlocked\n                  className={viewMode === \"list\" ? \"flex-row max-w-none\" : \"\"}\n                />\n                {!unlocked && (\n                  <div className=\"absolute inset-0 bg-black/90 rounded-2xl flex items-center justify-center\">\n                    <img \n                      src=\"/api/images/Locked.png\" \n                      alt=\"Locked\" \n                      className=\"w-16 h-16 opacity-80\" \n                    />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}*/}\n        {filteredCards.length > 0 && (\n          <div\n            className={\n              viewMode === \"grid\"\n                ? \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-6\"\n                : \"space-y-4\"\n            }\n            data-testid=\"card-collection\"\n          >\n            {filteredCards.map(({ word, unlocked }: any) => (\n              <div key={word.id} className=\"relative\">\n                <Card\n                  card={word}\n                  onClick={() => unlocked && handleCardClick(word)} // only clickable if unlocked\n                  className={viewMode === \"list\" ? \"flex-row max-w-none\" : \"\"}\n                />\n                {!unlocked && (\n                  <div className=\"absolute inset-0 bg-black/90 rounded-2xl flex items-center justify-center\">\n                    <img\n                      src=\"/api/images/Locked.png\"\n                      alt=\"Locked\"\n                      className=\"w-16 h-16 opacity-80\"\n                    />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Load More - For future pagination */}\n        {filteredCards.length > 0 && filteredCards.length < uniqueCards.length && (\n          <div className=\"flex justify-center mt-8\">\n            <Button \n              variant=\"outline\" \n              data-testid=\"load-more-btn\"\n            >\n              Load More Cards\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Card Modal */}\n      <CardModal\n        card={selectedCard}\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedCard(null);\n        }}\n        onCardChange={(newCard) => {\n          setSelectedCard(newCard);\n        }}\n        allCards={allWords}\n      />\n    </div>\n  );\n}\n","size_bytes":12843},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport Navigation from \"@/components/navigation\";\nimport PackOpening from \"@/components/pack-opening\";\nimport { loadCollectionFromLocalStorage, addCardToLocalCollection } from \"@/lib/card-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw } from \"lucide-react\";\n\nexport default function Home() {\n  const [collection, setCollection] = useState(loadCollectionFromLocalStorage());\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query to get all available words\n  const { data: allWords = [], isLoading } = useQuery<ChineseWord[]>({\n    queryKey: [\"/api/words\"],\n  });\n\n  // Mutation to initialize words from palabras.txt\n  const initializeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/words/initialize\", {\n        method: \"POST\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to initialize words\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Words Initialized\",\n        description: `Loaded ${data.words.length} Chinese words successfully!`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to initialize words\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePackOpened = (cards: ChineseWord[]) => {\n    // Add cards to local collection\n    let updatedCollection = collection;\n    cards.forEach(card => {\n      updatedCollection = addCardToLocalCollection(card);\n    });\n    setCollection(updatedCollection);\n  };\n\n  // Auto-initialize words if none exist\n  useEffect(() => {\n    if (!isLoading && allWords.length === 0) {\n      initializeMutation.mutate();\n    }\n  }, [isLoading, allWords.length]);\n\n  const uniqueCards = collection.reduce((acc: any[], item: any) => {\n    const existing = acc.find(c => c.word?.id === item.word?.id);\n    if (!existing) acc.push(item);\n    return acc;\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation \n        cardCount={uniqueCards.length} \n        totalCards={allWords.length} \n      />\n      \n      {/* Show initialization button if no words loaded */}\n      {!isLoading && allWords.length === 0 && (\n        <div className=\"container mx-auto px-4 py-12 text-center\">\n          <div className=\"bg-card border border-border rounded-xl p-8 max-w-md mx-auto\">\n            <h2 className=\"text-2xl font-bold mb-4\">Initialize Card Database</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Load Chinese words from the database to start playing!\n            </p>\n            <Button \n              onClick={() => initializeMutation.mutate()}\n              disabled={initializeMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"initialize-words-btn\"\n            >\n              {initializeMutation.isPending ? (\n                <>\n                  <RefreshCw className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Loading...\n                </>\n              ) : (\n                \"Load Chinese Words\"\n              )}\n            </Button>\n          </div>\n        </div>\n      )}\n      \n      {/* Pack Opening Interface */}\n      {allWords.length > 0 && (\n        <PackOpening onPackOpened={handlePackOpened} />\n      )}\n    </div>\n  );\n}\n","size_bytes":3741},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/training-area.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Headphones, Link, Shuffle, Tag, User, Play, Lock } from \"lucide-react\";\nimport type { ChineseWord } from \"@shared/schema\";\nimport RecognitionRecallExercise from \"./recognition-recall-exercise\";\n\ninterface TrainingAreaProps {\n  unlockedCards: ChineseWord[];\n}\n\ninterface ExerciseType {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  minCards: number;\n}\n\nconst exerciseTypes: ExerciseType[] = [\n  {\n    id: \"recognition-recall\",\n    title: \"Recognition & Recall Exercises\",\n    description: \"Test your ability to recognize Chinese characters and recall their meanings\",\n    icon: <Brain className=\"w-6 h-6\" />,\n    color: \"bg-blue-500\",\n    minCards: 6\n  },\n  {\n    id: \"listening-pronunciation\",\n    title: \"Listening & Pronunciation\",\n    description: \"Practice listening to pinyin pronunciation and speaking Chinese words\",\n    icon: <Headphones className=\"w-6 h-6\" />,\n    color: \"bg-green-500\",\n    minCards: 3\n  },\n  {\n    id: \"connect-usage\",\n    title: \"Connect & Usage\",\n    description: \"Learn how to use words in context and connect related concepts\",\n    icon: <Link className=\"w-6 h-6\" />,\n    color: \"bg-purple-500\",\n    minCards: 4\n  },\n  {\n    id: \"mixed-mode\",\n    title: \"Mixed-Mode\",\n    description: \"Random mix of different exercise types for comprehensive practice\",\n    icon: <Shuffle className=\"w-6 h-6\" />,\n    color: \"bg-orange-500\",\n    minCards: 10\n  },\n  {\n    id: \"category-training\",\n    title: \"Category Training\",\n    description: \"Focus on specific HSK levels or themes to master particular areas\",\n    icon: <Tag className=\"w-6 h-6\" />,\n    color: \"bg-red-500\",\n    minCards: 8\n  },\n  {\n    id: \"personalized\",\n    title: \"Personalized\",\n    description: \"Adaptive exercises based on your performance and learning patterns\",\n    icon: <User className=\"w-6 h-6\" />,\n    color: \"bg-cyan-500\",\n    minCards: 15\n  }\n];\n\nexport default function TrainingArea({ unlockedCards }: TrainingAreaProps) {\n  const [selectedExercise, setSelectedExercise] = useState<string | null>(null);\n  const [activeExercise, setActiveExercise] = useState<string | null>(null);\n\n  const handleStartExercise = (exerciseId: string) => {\n    if (exerciseId === \"recognition-recall\") {\n      setActiveExercise(exerciseId);\n    } else {\n      // Other exercises will be implemented later\n      console.log(`Starting exercise: ${exerciseId}`);\n    }\n  };\n\n  const handleExerciseComplete = (trainedCards: ChineseWord[]) => {\n    // Handle exercise completion - could save progress, show results, etc.\n    console.log(\"Exercise completed with cards:\", trainedCards);\n    setActiveExercise(null);\n    setSelectedExercise(null);\n  };\n\n  const handleExerciseBack = () => {\n    setActiveExercise(null);\n    setSelectedExercise(null);\n  };\n\n  const isExerciseAvailable = (exercise: ExerciseType) => {\n    return unlockedCards.length >= exercise.minCards;\n  };\n\n  const getAvailableCardsByHSK = () => {\n    const cardsByHSK: Record<number, number> = {};\n    unlockedCards.forEach(card => {\n      const level = Number(card.hsklevel) || 1;\n      cardsByHSK[level] = (cardsByHSK[level] || 0) + 1;\n    });\n    return cardsByHSK;\n  };\n\n  const cardsByHSK = getAvailableCardsByHSK();\n\n  // If recognition & recall exercise is active, render it\n  if (activeExercise === \"recognition-recall\") {\n    return (\n      <RecognitionRecallExercise\n        cards={unlockedCards}\n        onComplete={handleExerciseComplete}\n        onBack={handleExerciseBack}\n      />\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4\">Training Area</h1>\n        <p className=\"text-lg text-muted-foreground mb-6\">\n          Choose from different training exercises to improve your Chinese vocabulary skills\n        </p>\n        <div className=\"flex justify-center items-center space-x-4 mb-8\">\n          <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\n            🃏 {unlockedCards.length} cards unlocked\n          </Badge>\n          <div className=\"flex space-x-2\">\n            {[1, 2, 3, 4, 5, 6].map(level => (\n              <Badge \n                key={level} \n                variant={cardsByHSK[level] > 0 ? \"default\" : \"outline\"}\n                className=\"text-sm\"\n              >\n                HSK {level}: {cardsByHSK[level] || 0}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {unlockedCards.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"bg-muted rounded-xl p-8 max-w-md mx-auto\">\n            <Lock className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h2 className=\"text-xl font-semibold mb-4\">No Cards Available</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              You need to unlock some cards first by opening packs before you can start training exercises.\n            </p>\n            <Button asChild>\n              <a href=\"/\">Go to Pack Opening</a>\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {exerciseTypes.map((exercise) => {\n            const isAvailable = isExerciseAvailable(exercise);\n            \n            return (\n              <Card \n                key={exercise.id}\n                className={`transition-all duration-200 ${\n                  isAvailable \n                    ? \"hover:shadow-lg cursor-pointer border-2 hover:border-primary\" \n                    : \"opacity-60 cursor-not-allowed\"\n                } ${selectedExercise === exercise.id ? \"border-primary bg-primary/5\" : \"\"}`}\n                onClick={() => isAvailable && setSelectedExercise(exercise.id)}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-2 rounded-lg ${exercise.color} text-white`}>\n                      {exercise.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{exercise.title}</CardTitle>\n                      {!isAvailable && (\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          Need {exercise.minCards} cards\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <CardDescription className=\"text-sm mb-4\">\n                    {exercise.description}\n                  </CardDescription>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      Min: {exercise.minCards} cards\n                    </Badge>\n                    \n                    <Button \n                      size=\"sm\"\n                      disabled={!isAvailable}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleStartExercise(exercise.id);\n                      }}\n                      className=\"gap-2\"\n                    >\n                      {isAvailable ? (\n                        <>\n                          <Play className=\"w-4 h-4\" />\n                          Start\n                        </>\n                      ) : (\n                        <>\n                          <Lock className=\"w-4 h-4\" />\n                          Locked\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {selectedExercise && (\n        <div className=\"mt-8 text-center\">\n          <div className=\"bg-card border border-border rounded-xl p-6 max-w-lg mx-auto\">\n            <h3 className=\"text-lg font-semibold mb-4\">Exercise Selected</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              You have selected \"{exerciseTypes.find(e => e.id === selectedExercise)?.title}\". \n              Exercise content will be implemented in the next phase.\n            </p>\n            <div className=\"flex space-x-3 justify-center\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setSelectedExercise(null)}\n              >\n                Back to Selection\n              </Button>\n              <Button \n                onClick={() => handleStartExercise(selectedExercise)}\n                className=\"gap-2\"\n              >\n                <Play className=\"w-4 h-4\" />\n                Start Exercise\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9119},"client/src/pages/training.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/navigation\";\nimport TrainingArea from \"@/components/training-area\";\nimport { loadCollectionFromLocalStorage } from \"@/lib/card-utils\";\nimport type { ChineseWord } from \"@shared/schema\";\n\nexport default function Training() {\n  const [collection] = useState(loadCollectionFromLocalStorage());\n\n  // Query to get all available words\n  const { data: allWords = [] } = useQuery<ChineseWord[]>({\n    queryKey: [\"/api/words\"],\n  });\n\n  // Get unique unlocked cards from collection\n  const uniqueCards = collection.reduce((acc: any[], item: any) => {\n    const existing = acc.find(c => c.word?.id === item.word?.id);\n    if (!existing) acc.push(item);\n    return acc;\n  }, []);\n\n  // Get all unlocked words from the collection\n  const unlockedWords = uniqueCards\n    .map((item: any) => item.word)\n    .filter(Boolean) as ChineseWord[];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation \n        cardCount={uniqueCards.length} \n        totalCards={allWords.length} \n      />\n      \n      <TrainingArea unlockedCards={unlockedWords} />\n    </div>\n  );\n}","size_bytes":1194},"client/src/components/recognition-recall-exercise.tsx":{"content":"import { useState, useEffect, useMemo,useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { type ChineseWord } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card as UICard } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { pinyinNumericToAccents } from \"@/components/pinyinUtils\";\nimport Card from \"@/components/card\";\nimport { CheckCircle, XCircle, BookOpen, Target, Users } from \"lucide-react\";\n\ninterface RecognitionRecallExerciseProps {\n  cards: ChineseWord[];\n  onComplete: (trainedCards: ChineseWord[]) => void;\n  onBack: () => void;\n}\n\ntype ExerciseData = \n  | { card: ChineseWord; type: 'pinyin_fill' }\n  | { card: ChineseWord; type: 'translation_choice'; choices: string[] }\n  | { card: ChineseWord; type: 'character_choice'; choices: ChineseWord[] };\n\ntype ExerciseType = 'pinyin_fill' | 'translation_choice' | 'character_choice';\n\nexport default function RecognitionRecallExercise({ \n  cards, \n  onComplete, \n  onBack \n}: RecognitionRecallExerciseProps) {\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<string[]>([]);\n  const [selectedChoice, setSelectedChoice] = useState<string | null>(null);\n  const [showResult, setShowResult] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [score, setScore] = useState(0);\n  const [showFinalResults, setShowFinalResults] = useState(false);\n  const [exercises, setExercises] = useState<ExerciseData[]>([]);\n\n  // Generate exercises when component mounts\n  // Generate exercises when component mounts\n  useEffect(() => {\n    if (cards.length > 0) {\n      const exerciseData: ExerciseData[] = [];\n\n      for (const card of cards) {\n        // Shuffle exercise types and pick 2 distinct ones\n        const types: ExerciseType[] = shuffleArray(['pinyin_fill', 'translation_choice', 'character_choice']);\n        const selectedTypes = types.slice(0, 2);\n\n        for (const type of selectedTypes) {\n          if (type === 'pinyin_fill') {\n            exerciseData.push({ card, type });\n          } else if (type === 'translation_choice') {\n            exerciseData.push({\n              card,\n              type,\n              choices: generateTranslationChoices(card, cards)\n            });\n          } else {\n            exerciseData.push({\n              card,\n              type,\n              choices: generateCharacterChoices(card, cards)\n            });\n          }\n        }\n      }\n\n      setExercises(shuffleArray(exerciseData));\n    }\n  }, [cards]);\n\n\n\n  // Generate translation choices from cards with similar themes/HSK levels\n  const generateTranslationChoices = (targetCard: ChineseWord, allCards: ChineseWord[]): string[] => {\n    const choices = [targetCard.translation];\n    \n    // First try to find cards with same HSK level\n    let candidateCards = allCards.filter(card => \n      card.id !== targetCard.id && card.hsklevel === targetCard.hsklevel\n    );\n    \n    // If not enough, expand to adjacent HSK levels\n    if (candidateCards.length < 2) {\n      candidateCards = allCards.filter(card => \n        card.id !== targetCard.id && \n        Math.abs(Number(card.hsklevel || 1) - Number(targetCard.hsklevel || 1)) <= 1\n      );\n    }\n    \n    // If still not enough, use any other cards\n    if (candidateCards.length < 2) {\n      candidateCards = allCards.filter(card => card.id !== targetCard.id);\n    }\n    \n    // Add unique translations until we have 3 total\n    const shuffledCandidates = shuffleArray(candidateCards);\n    for (const card of shuffledCandidates) {\n      if (choices.length >= 3) break;\n      if (!choices.includes(card.translation)) {\n        choices.push(card.translation);\n      }\n    }\n    \n    // Only add placeholder if we absolutely can't find enough unique translations\n    // This should rarely happen in a real dataset\n    while (choices.length < 3) {\n      choices.push(`Alternative meaning ${choices.length}`);\n    }\n    \n    return shuffleArray(choices);\n  };\n\n  // Generate character choices with shared pinyin letters\n  const generateCharacterChoices = (targetCard: ChineseWord, allCards: ChineseWord[]): ChineseWord[] => {\n    const choices = [targetCard];\n    const targetPinyin = targetCard.pinyin.toLowerCase().replace(/\\d/g, '');\n    \n    // Find cards with pinyin that shares at least 1 letter\n    const similarPinyinCards = allCards.filter(card => {\n      if (card.id === targetCard.id) return false;\n      const cardPinyin = card.pinyin.toLowerCase().replace(/\\d/g, '');\n      \n      // Check if they share at least one letter\n      for (let char of cardPinyin) {\n        if (targetPinyin.includes(char) && char.match(/[a-z]/)) {\n          return true;\n        }\n      }\n      return false;\n    });\n    \n    // Add two cards with shared letters\n    while (choices.length < 3 && similarPinyinCards.length > 0) {\n      const randomIndex = Math.floor(Math.random() * similarPinyinCards.length);\n      choices.push(similarPinyinCards[randomIndex]);\n      similarPinyinCards.splice(randomIndex, 1);\n    }\n    \n    // Fallback to any other cards if not enough\n    while (choices.length < 3) {\n      const otherCards = allCards.filter(card => !choices.find(c => c.id === card.id));\n      if (otherCards.length > 0) {\n        choices.push(otherCards[Math.floor(Math.random() * otherCards.length)]);\n      } else {\n        break;\n      }\n    }\n    \n    return shuffleArray(choices);\n  };\n\n  const shuffleArray = <T,>(array: T[]): T[] => {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  };\n\n  const currentExercise = exercises[currentExerciseIndex];\n  const isLastExercise = currentExerciseIndex === exercises.length - 1;\n  const progress = ((currentExerciseIndex + 1) / exercises.length) * 100;\n\n  if (!currentExercise || exercises.length === 0) {\n    return <div>Loading exercises...</div>;\n  }\n\n  const checkAnswer = () => {\n    let correct = false;\n    \n    switch (currentExercise.type) {\n      case 'pinyin_fill':\n        const normalizedAnswer = normalizePinyin(Array.isArray(userAnswer) ? userAnswer.join(\"\") : userAnswer);\n        const normalizedPinyin = normalizePinyin(currentExercise.card.pinyin);\n        correct = normalizedAnswer === normalizedPinyin;\n        break;\n      case 'translation_choice':\n        correct = selectedChoice === currentExercise.card.translation;\n        break;\n      case 'character_choice':\n        correct = selectedChoice === currentExercise.card.id;\n        break;\n    }\n\n    setIsCorrect(correct);\n    setShowResult(true);\n    if (correct) {\n      setScore(prev => prev + 1);\n    }\n  };\n\n  const nextExercise = () => {\n    setShowResult(false);\n    setUserAnswer([]);\n    setSelectedChoice(null);\n\n    if (isLastExercise) {\n      setShowFinalResults(true);\n    } else {\n      setCurrentExerciseIndex(prev => prev + 1);\n    }\n  };\n\n  const normalizePinyin = (pinyin: string): string => {\n    let normalized = pinyin.toLowerCase().trim().replace(/\\s+/g, ' ');\n    normalized = normalized.replace(/u:/g, 'ü').replace(/v/g, 'ü');\n    \n    if (/\\d/.test(normalized)) {\n      normalized = pinyinNumericToAccents(normalized);\n    }\n    \n    return normalized.replace(/'/g, '').replace(/\\s+/g, ' ').trim();\n  };\n\n  const addToneToInput = (tone: string) => {\n    const vowels = userAnswer.match(/[aeiouü]/g);\n    if (!vowels) return;\n    \n    const lastVowel = vowels[vowels.length - 1];\n    const toneMap: { [key: string]: { [key: string]: string } } = {\n      'ā': { 'a': 'ā', 'e': 'ē', 'i': 'ī', 'o': 'ō', 'u': 'ū', 'ü': 'ǖ' },\n      'á': { 'a': 'á', 'e': 'é', 'i': 'í', 'o': 'ó', 'u': 'ú', 'ü': 'ǘ' },\n      'ǎ': { 'a': 'ǎ', 'e': 'ě', 'i': 'ǐ', 'o': 'ǒ', 'u': 'ǔ', 'ü': 'ǚ' },\n      'à': { 'a': 'à', 'e': 'è', 'i': 'ì', 'o': 'ò', 'u': 'ù', 'ü': 'ǜ' }\n    };\n    \n    if (toneMap[tone] && toneMap[tone][lastVowel]) {\n      const newAnswer = userAnswer.replace(new RegExp(lastVowel + '(?!.*' + lastVowel + ')'), toneMap[tone][lastVowel]);\n      setUserAnswer(newAnswer);\n    }\n  };\n\n  const getExerciseIcon = (type: ExerciseType) => {\n    switch (type) {\n      case 'pinyin_fill': return <BookOpen className=\"w-12 h-12 text-blue-500\" />;\n      case 'translation_choice': return <Target className=\"w-12 h-12 text-green-500\" />;\n      case 'character_choice': return <Users className=\"w-12 h-12 text-purple-500\" />;\n    }\n  };\n\n  const getExerciseTitle = (type: ExerciseType) => {\n    switch (type) {\n      case 'pinyin_fill': return 'Fill in the Pinyin';\n      case 'translation_choice': return 'Choose the Translation';\n      case 'character_choice': return 'Choose the Character';\n    }\n  };\n\n  const getExerciseDescription = (type: ExerciseType) => {\n    switch (type) {\n      case 'pinyin_fill': return 'Type the correct pinyin pronunciation for this character';\n      case 'translation_choice': return 'Select the correct English translation';\n      case 'character_choice': return 'Select the correct character for this pinyin';\n    }\n  };\n  const uniqueTrainedCards = Array.from(\n    new Map(exercises.map(e => [e.card.id, e.card])).values()\n  );\n  if (showFinalResults) {\n    return (\n      <div className=\"min-h-screen bg-background relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-green-900/20\"></div>\n        \n        <div className=\"relative z-10 container mx-auto px-4 py-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-8\"\n          >\n            <h2 className=\"text-4xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-yellow-500 bg-clip-text text-transparent mb-4\">\n              Exercise Complete!\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-2\">\n              Final Score: {score} / {exercises.length}\n            </p>\n            <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\n              {Math.round((score / exercises.length) * 100)}% Accuracy\n            </Badge>\n          </motion.div>\n\n          <div className=\"mb-8\">\n            <h3 className=\"text-2xl font-semibold text-center mb-6\">Cards Trained</h3> \n            <div className=\"flex flex-wrap justify-center gap-5\">\n              {uniqueTrainedCards.map((card, index) => (\n                <motion.div\n                  key={card.id}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card\n                    card={card}\n                    onClick={() => {}}\n                    className=\"transform hover:scale-105 transition-transform\"\n                  />\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-center space-x-4\">\n            <Button variant=\"outline\" onClick={onBack} size=\"lg\">\n              Back to Training\n            </Button>\n            <Button onClick={() => onComplete(uniqueTrainedCards)} size=\"lg\">\n              Continue Training\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-green-900/20\"></div>\n      \n      <div className=\"relative z-10 container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-yellow-500 bg-clip-text text-transparent mb-2\">\n            Recognition & Recall Exercises\n          </h2>\n          <p className=\"text-muted-foreground\">Test your Chinese character recognition skills!</p>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-4\">\n            <div \n              className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Exercise {currentExerciseIndex + 1} of {exercises.length}\n          </p>\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentExerciseIndex}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"max-w-3xl mx-auto\"\n          >\n            <UICard className=\"relative p-8 shadow-2xl border-2 border-purple-500/30\">\n              {/* Top-left icon */}\n              <div className=\"absolute top-4 left-4\">\n                {getExerciseIcon(currentExercise.type)}\n              </div>\n\n              {/* Static 2-column grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n                {/* LEFT: Character / Pinyin / HSK Level */}\n                <div className=\"flex flex-col items-center justify-center space-y-4\">\n                  {currentExercise.type === 'character_choice' ? (\n                    <>\n                      <div className=\"text-2xl font-mono\">\n                        {pinyinNumericToAccents(currentExercise.card.pinyin)}\n                      </div>\n                      <div className=\"text-lg text-muted-foreground\">\n                        HSK Level {currentExercise.card.hsklevel}\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"text-6xl md:text-8xl font-chinese\">\n                        {currentExercise.card.chinese}\n                      </div>\n                      <div className=\"text-lg text-muted-foreground\">\n                        HSK Level {currentExercise.card.hsklevel}\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* RIGHT: Exercise Interaction */}\n                <div className=\"flex flex-col justify-center\">\n                  {!showResult ? (\n                    <>\n                      {currentExercise.type === 'pinyin_fill' && (\n                        <PinyinFillExercise \n                          correctPinyin={currentExercise.card.pinyin}\n                          userAnswer={userAnswer}\n                          setUserAnswer={setUserAnswer}\n                          onSubmit={checkAnswer}\n                          onAddTone={addToneToInput}\n                        />\n                      )}\n                      {currentExercise.type === 'translation_choice' && (\n                        <TranslationChoiceExercise \n                          choices={currentExercise.choices as string[]}\n                          selectedChoice={selectedChoice}\n                          setSelectedChoice={setSelectedChoice}\n                          onSubmit={checkAnswer}\n                        />\n                      )}\n                      {currentExercise.type === 'character_choice' && (\n                        <CharacterChoiceExercise \n                          choices={currentExercise.choices as ChineseWord[]}\n                          selectedChoice={selectedChoice}\n                          setSelectedChoice={setSelectedChoice}\n                          onSubmit={checkAnswer}\n                        />\n                      )}\n                    </>\n                  ) : (\n                    <ExerciseResult \n                      isCorrect={isCorrect}\n                      currentExercise={currentExercise}\n                      userAnswer={currentExercise.type === 'pinyin_fill' ? userAnswer : selectedChoice || ''}\n                      onNext={nextExercise}\n                      isLastExercise={isLastExercise}\n                    />\n                  )}\n                </div>\n              </div>\n            </UICard>\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Score Display */}\n        <div className=\"fixed bottom-4 right-4 bg-card/90 backdrop-blur-sm border border-border rounded-lg p-4 shadow-lg\">\n          <div className=\"text-sm font-semibold mb-1\">Score</div>\n          <div className=\"text-xs\">\n            {score} / {currentExerciseIndex + (showResult ? 1 : 0)} correct\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Component for pinyin fill-in exercise with tone buttons\ninterface PinyinFillExerciseProps {\n  correctPinyin: string; // NEW\n  userAnswer: string;\n  setUserAnswer: (answer: string) => void;\n  onSubmit: () => void;\n  onAddTone: (tone: string) => void;\n}\n\nfunction PinyinFillExercise({\n  correctPinyin,\n  userAnswer,\n  setUserAnswer,\n  onSubmit,\n}: PinyinFillExerciseProps) {\n  const normalizedAnswer = correctPinyin.replace(/\\s/g, \"\");\n  const answerLength = normalizedAnswer.length;\n  const inputRefs = useRef<HTMLInputElement[]>([]);\n  const [selectedAccentIndex, setSelectedAccentIndex] = useState<number | null>(null);\n  const [invalidAccentIndex, setInvalidAccentIndex] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (!Array.isArray(userAnswer)) {\n      setUserAnswer(Array(answerLength).fill(\"\"));\n    }\n  }, [answerLength, setUserAnswer, userAnswer]);\n\n  // Convert 'v' => 'ü' on typing\n  const normalizeV = (ch: string) => {\n    if (!ch) return \"\";\n    return ch === \"v\" || ch === \"V\" ? \"ü\" : ch;\n  };\n\n  const handleChange = (index: number, value: string) => {\n    const newAnswer = Array.isArray(userAnswer)\n      ? [...userAnswer]\n      : Array(answerLength).fill(\"\");\n    const lastChar = value.slice(-1);\n    newAnswer[index] = normalizeV(lastChar);\n    setUserAnswer(newAnswer);\n\n    if (lastChar && index < answerLength - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  // Helper: get base vowel while PRESERVING diaeresis (ü)\n  const getBaseVowel = (char: string, fallbackIndex: number) => {\n    // prefer the typed char, fallback to the solution char\n    let source = (char || normalizedAnswer[fallbackIndex] || \"\").toString();\n\n    // if user typed 'v' treat it as 'ü'\n    if (/^v$/i.test(source)) return \"ü\";\n\n    // Normalize to NFD so accents and diaeresis are combining marks\n    const nfd = source.normalize(\"NFD\");\n\n    // Remove only tone combining marks: grave \\u0300, acute \\u0301, caron \\u030C, macron \\u0304\n    // (Do NOT remove \\u0308 = diaeresis)\n    const withoutTone = nfd.replace(/[\\u0300\\u0301\\u030C\\u0304]/g, \"\");\n\n    // If there's a diaeresis combining mark left, treat as ü\n    const hasDiaeresis = /\\u0308/.test(withoutTone) || /[ü]/i.test(source);\n\n    // Remove diaeresis mark to get the base letter (e.g. 'u' from 'u\\u0308')\n    const baseLetter = withoutTone.replace(/\\u0308/g, \"\").replace(/[\\u0300-\\u036f]/g, \"\");\n\n    return hasDiaeresis ? \"ü\" : (baseLetter || \"\").toLowerCase();\n  };\n\n  const handleToneInsert = (tone: string) => {\n    if (selectedAccentIndex === null) return;\n\n    const newAnswer = Array.isArray(userAnswer)\n      ? [...userAnswer]\n      : Array(answerLength).fill(\"\");\n    const typedChar = newAnswer[selectedAccentIndex] || \"\";\n    const base = getBaseVowel(typedChar, selectedAccentIndex);\n\n    // Only vowels a, e, i, o, u, ü accepted\n    if (!/[aeiouü]/i.test(base)) {\n      setInvalidAccentIndex(selectedAccentIndex);\n      setTimeout(() => setInvalidAccentIndex(null), 420);\n      return;\n    }\n\n    const toneMap: Record<string, Record<string, string>> = {\n      \"ˉ\": { a: \"ā\", e: \"ē\", i: \"ī\", o: \"ō\", u: \"ū\", ü: \"ǖ\" },\n      \"ˊ\": { a: \"á\", e: \"é\", i: \"í\", o: \"ó\", u: \"ú\", ü: \"ǘ\" },\n      \"ˇ\": { a: \"ǎ\", e: \"ě\", i: \"ǐ\", o: \"ǒ\", u: \"ǔ\", ü: \"ǚ\" },\n      \"ˋ\": { a: \"à\", e: \"è\", i: \"ì\", o: \"ò\", u: \"ù\", ü: \"ǜ\" },\n    };\n\n    const mapped = toneMap[tone] && toneMap[tone][base];\n    if (mapped) {\n      newAnswer[selectedAccentIndex] = mapped;\n      setUserAnswer(newAnswer);\n      // keep focus on the input\n      inputRefs.current[selectedAccentIndex]?.focus();\n    }\n  };\n\n  const syllables = correctPinyin.split(\" \");\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-2\">Fill in the Pinyin</h3>\n        <p className=\"text-muted-foreground\">Type (use \"v\" for ü), click a box above a letter, then choose a tone.</p>\n      </div>\n\n      <div className=\"flex justify-center gap-4 flex-wrap\">\n        {syllables.map((syllable, sIndex) => (\n          <div key={sIndex} className=\"flex gap-2\">\n            {Array.from(syllable).map((_, index) => {\n              const globalIndex = syllables.slice(0, sIndex).join(\"\").length + index;\n              const isSelected = selectedAccentIndex === globalIndex;\n              const isInvalid = invalidAccentIndex === globalIndex;\n\n              return (\n                <div key={globalIndex} className=\"flex flex-col items-center\">\n                  <button\n                    className={`w-6 h-4 rounded-sm border text-xs mb-1 transition-colors\n                      ${isInvalid ? \"border-red-500 bg-red-100\" : isSelected ? \"border-blue-500 bg-blue-100\" : \"border-gray-300 bg-gray-50\"}`}\n                    onClick={() => setSelectedAccentIndex(globalIndex)}\n                    aria-label={`Select accent slot ${globalIndex}`}\n                  />\n\n                  <Input\n                    ref={(el) => (inputRefs.current[globalIndex] = el!)}\n                    type=\"text\"\n                    maxLength={1}\n                    value={Array.isArray(userAnswer) ? userAnswer[globalIndex] || \"\" : \"\"}\n                    onChange={(e) => handleChange(globalIndex, e.target.value)}\n                    className=\"w-10 h-12 text-center text-lg border-b-2\"\n                  />\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex justify-center space-x-2\">\n        {[\"ˉ\", \"ˊ\", \"ˇ\", \"ˋ\"].map((t) => (\n          <Button key={t} variant=\"outline\" size=\"sm\" onClick={() => handleToneInsert(t)} disabled={selectedAccentIndex === null}>\n            {t}\n          </Button>\n        ))}\n      </div>\n\n      <Button onClick={onSubmit} disabled={!Array.isArray(userAnswer) || userAnswer.some((c) => !c)} className=\"w-full\" size=\"lg\">\n        Submit Answer\n      </Button>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n// Component for translation multiple choice\ninterface TranslationChoiceExerciseProps {\n  choices: string[];\n  selectedChoice: string | null;\n  setSelectedChoice: (choice: string) => void;\n  onSubmit: () => void;\n}\n\nfunction TranslationChoiceExercise({ \n  choices, \n  selectedChoice, \n  setSelectedChoice, \n  onSubmit \n}: TranslationChoiceExerciseProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-2\">Choose the Translation</h3>\n        <p className=\"text-muted-foreground\">Select the correct English translation</p>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {choices.map((choice, index) => (\n          <Button\n            key={choice}\n            variant={selectedChoice === choice ? \"default\" : \"outline\"}\n            onClick={() => setSelectedChoice(choice)}\n            className=\"w-full text-left justify-start h-auto p-4\"\n          >\n            <span className=\"font-semibold mr-3\">{String.fromCharCode(65 + index)}.</span>\n            {choice}\n          </Button>\n        ))}\n      </div>\n      \n      <Button \n        onClick={onSubmit}\n        disabled={!selectedChoice}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        Submit Answer\n      </Button>\n    </div>\n  );\n}\n\n// Component for character choice based on pinyin\ninterface CharacterChoiceExerciseProps {\n  choices: ChineseWord[];\n  selectedChoice: string | null;\n  setSelectedChoice: (choice: string) => void;\n  onSubmit: () => void;\n}\n\nfunction CharacterChoiceExercise({ \n  choices, \n  selectedChoice, \n  setSelectedChoice, \n  onSubmit \n}: CharacterChoiceExerciseProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-2\">Choose the Character</h3>\n        <p className=\"text-muted-foreground\">Select the correct character for this pinyin</p>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {choices.map((choice, index) => (\n          <Button\n            key={choice.id}\n            variant={selectedChoice === choice.id ? \"default\" : \"outline\"}\n            onClick={() => setSelectedChoice(choice.id)}\n            className=\"w-full text-left justify-start h-auto p-4\"\n          >\n            <span className=\"font-semibold mr-3\">{String.fromCharCode(65 + index)}.</span>\n            <span className=\"text-base\">{choice.chinese}</span>\n          </Button>\n        ))}\n      </div>\n\n      \n      <Button \n        onClick={onSubmit}\n        disabled={!selectedChoice}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        Submit Answer\n      </Button>\n    </div>\n  );\n}\n\n// Results component\ninterface ExerciseResultProps {\n  isCorrect: boolean;\n  currentExercise: ExerciseData;\n  userAnswer: string;\n  onNext: () => void;\n  isLastExercise: boolean;\n}\n\nfunction ExerciseResult({ \n  isCorrect, \n  currentExercise, \n  userAnswer, \n  onNext, \n  isLastExercise \n}: ExerciseResultProps) {\n  const getCorrectAnswer = () => {\n    switch (currentExercise.type) {\n      case 'pinyin_fill':\n        return currentExercise.card.pinyin;\n      case 'translation_choice':\n        return currentExercise.card.translation;\n      case 'character_choice':\n        return currentExercise.card.chinese;\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ scale: 0.9, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      className=\"text-center space-y-6\"\n    >\n      <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${\n        isCorrect ? 'bg-green-100 dark:bg-green-900/30' : 'bg-red-100 dark:bg-red-900/30'\n      }`}>\n        {isCorrect ? (\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\n        ) : (\n          <XCircle className=\"w-8 h-8 text-red-600\" />\n        )}\n      </div>\n      \n      <div>\n        <h3 className={`text-xl font-semibold mb-2 ${\n          isCorrect ? 'text-green-600' : 'text-red-600'\n        }`}>\n          {isCorrect ? 'Correct!' : 'Incorrect'}\n        </h3>\n        \n        {!isCorrect && (\n          <div className=\"space-y-2\">\n            <p className=\"text-muted-foreground\">\n              Your answer: <span className=\"font-medium\">{userAnswer}</span>\n            </p>\n            <p className=\"text-muted-foreground\">\n              Correct answer: <span className=\"font-medium text-green-600\">{getCorrectAnswer()}</span>\n            </p>\n          </div>\n        )}\n      </div>\n      \n      <Button \n        onClick={onNext}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {isLastExercise ? 'View Results' : 'Next Exercise'}\n      </Button>\n    </motion.div>\n  );\n}","size_bytes":27343}},"version":1}